<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蜗牛buff</title>
  
  <subtitle>Android &amp; 前端开发，坚持输出</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://biaomingzhong.github.io/"/>
  <updated>2021-04-12T07:08:59.930Z</updated>
  <id>https://biaomingzhong.github.io/</id>
  
  <author>
    <name>biaomingzhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Framework 笔记02 - init 进程启动过程</title>
    <link href="https://biaomingzhong.github.io/2020/android-framework-02-base-init-process/"/>
    <id>https://biaomingzhong.github.io/2020/android-framework-02-base-init-process/</id>
    <published>2020-02-29T08:50:15.000Z</published>
    <updated>2021-04-12T07:08:59.930Z</updated>
    
    <content type="html"><![CDATA[<p>init 进程是 Android 系统中用户空间的第一个进程，进程号为 1，是 Android 系统启动流程中一个关键的步骤，作为第一个进程，它被赋予了很多极其重要的工作职责，比如创建 Zygote (孵化器) 和属性服务等。init 进程是由多个源文件共同组成的，这些文件位于源码目录 system/core/init 中。</p><a id="more"></a><h2 id="引入-init-进程"><a href="#引入-init-进程" class="headerlink" title="引入 init 进程"></a>引入 init 进程</h2><p>为了讲解 init 进程，首先了解一下 Android 系统启动流程的前几步，以引入 init 进程。</p><h3 id="1）启动电源以及系统启动"><a href="#1）启动电源以及系统启动" class="headerlink" title="1）启动电源以及系统启动"></a>1）启动电源以及系统启动</h3><p>当电源按下时引导芯片代码从预定义的地方 (固化在 ROM) 开始执行。加载引导程序 BootLoader 到 RAM 中，然后执行。</p><h3 id="2）引导程序-BootLoader"><a href="#2）引导程序-BootLoader" class="headerlink" title="2）引导程序 BootLoader"></a>2）引导程序 BootLoader</h3><p>引导程序 BootLoader 是在 Android 系统启动前的一个小程序，它的作用主要是把系统 OS 拉起来并运行。</p><h3 id="3）Linux-内核启动"><a href="#3）Linux-内核启动" class="headerlink" title="3）Linux 内核启动"></a>3）Linux 内核启动</h3><p>当内核启动时，设置缓存、被保护存储器、计划列表、加载驱动。在内核完成系统设置后，它首先在系统文件中寻找 init.rc 文件，并启动 init 进程。</p><h3 id="4）init-进程启动"><a href="#4）init-进程启动" class="headerlink" title="4）init 进程启动"></a>4）init 进程启动</h3><p>init 进程做的工作比较多，主要用来初始化和属性服务，也用来启动 Zygote 进程。</p><p>从上面的步骤可以看出，当我们按下电源时，系统启动会加载引导程序，引导程序又启动 Linux 内核，在 Linux 内核完成后，第一件事就是要启动 init 进程。</p><h2 id="init-进程的入口函数"><a href="#init-进程的入口函数" class="headerlink" title="init 进程的入口函数"></a>init 进程的入口函数</h2><p>在 Linux 内核加载完成后，它首先在系统文件中寻找 init.rc 文件，并启动 init 进程，init 进程的入口函数 main，代码如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> is_first_stage = (getenv(<span class="string">"INIT_SECOND_STAGE"</span>) == <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_first_stage) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 对属性服务进行初始化</span></span><br><span class="line">    property_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 epoll 句柄</span></span><br><span class="line">    epoll_fd = epoll_create1(EPOLL_CLOEXEC);</span><br><span class="line">    <span class="keyword">if</span> (epoll_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        PLOG(FATAL) &lt;&lt; <span class="string">"epoll_create1 failed"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 用于设置子进程信号处理函数，如果子进程 (Zygote 进程) 异常退出，init 进程</span></span><br><span class="line">    <span class="comment">// 会调用该函数中设定的信号处理函数进行处理</span></span><br><span class="line">    sigchld_handler_init();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!IsRebootCapable()) &#123;</span><br><span class="line">        <span class="comment">// If init does not have the CAP_SYS_BOOT capability, it is running in a container.</span></span><br><span class="line">        <span class="comment">// In that case, receiving SIGTERM will cause the system to shut down.</span></span><br><span class="line">        InstallSigtermHandler();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导入默认的环境变量</span></span><br><span class="line">    property_load_boot_defaults();</span><br><span class="line">    export_oem_lock_status();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 启动属性服务</span></span><br><span class="line">    start_property_service();</span><br><span class="line">    set_usb_controller();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 解析加载 init.rc 配置文件</span></span><br><span class="line">    LoadBootScripts(am, sm);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// By default, sleep until something happens.</span></span><br><span class="line">        <span class="keyword">int</span> epoll_timeout_ms = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (do_shutdown &amp;&amp; !shutting_down) &#123;</span><br><span class="line">            do_shutdown = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (HandlePowerctlMessage(shutdown_command)) &#123;</span><br><span class="line">                shutting_down = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(waiting_for_prop || Service::is_exec_service_running())) &#123;</span><br><span class="line">            am.ExecuteOneCommand();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(waiting_for_prop || Service::is_exec_service_running())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!shutting_down) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 5. 重启死去的进程</span></span><br><span class="line">                <span class="keyword">auto</span> next_process_restart_time = RestartProcesses();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// If there's a process that needs restarting, wake up in time for that.</span></span><br><span class="line">                <span class="keyword">if</span> (next_process_restart_time) &#123;</span><br><span class="line">                    epoll_timeout_ms = <span class="built_in">std</span>::chrono::<span class="built_in">ceil</span>&lt;<span class="built_in">std</span>::chrono::milliseconds&gt;(</span><br><span class="line">                                           *next_process_restart_time - boot_clock::now())</span><br><span class="line">                                           .count();</span><br><span class="line">                    <span class="keyword">if</span> (epoll_timeout_ms &lt; <span class="number">0</span>) epoll_timeout_ms = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If there's more work to do, wake up again immediately.</span></span><br><span class="line">            <span class="keyword">if</span> (am.HasMoreCommands()) epoll_timeout_ms = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        epoll_event ev;</span><br><span class="line">        <span class="keyword">int</span> nr = TEMP_FAILURE_RETRY(epoll_wait(epoll_fd, &amp;ev, <span class="number">1</span>, epoll_timeout_ms));</span><br><span class="line">        <span class="keyword">if</span> (nr == <span class="number">-1</span>) &#123;</span><br><span class="line">            PLOG(ERROR) &lt;&lt; <span class="string">"epoll_wait failed"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nr == <span class="number">1</span>) &#123;</span><br><span class="line">            ((<span class="keyword">void</span> (*)()) ev.data.ptr)();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析加载 init.rc 配置文件</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LoadBootScripts</span><span class="params">(ActionManager&amp; action_manager, ServiceList&amp; service_list)</span> </span>&#123;</span><br><span class="line">    Parser parser = CreateParser(action_manager, service_list);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bootscript = GetProperty(<span class="string">"ro.boot.init_rc"</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">if</span> (bootscript.empty()) &#123;</span><br><span class="line">        parser.ParseConfig(<span class="string">"/init.rc"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!parser.ParseConfig(<span class="string">"/system/etc/init"</span>)) &#123;</span><br><span class="line">            late_import_paths.emplace_back(<span class="string">"/system/etc/init"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!parser.ParseConfig(<span class="string">"/product/etc/init"</span>)) &#123;</span><br><span class="line">            late_import_paths.emplace_back(<span class="string">"/product/etc/init"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!parser.ParseConfig(<span class="string">"/odm/etc/init"</span>)) &#123;</span><br><span class="line">            late_import_paths.emplace_back(<span class="string">"/odm/etc/init"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!parser.ParseConfig(<span class="string">"/vendor/etc/init"</span>)) &#123;</span><br><span class="line">            late_import_paths.emplace_back(<span class="string">"/vendor/etc/init"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        parser.ParseConfig(bootscript);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1）-注释-1-和-3-都是关于属性服务"><a href="#1）-注释-1-和-3-都是关于属性服务" class="headerlink" title="1） 注释 1 和 3 都是关于属性服务"></a>1） 注释 1 和 3 都是关于属性服务</h3><p>在注释 1 处 <code>property_init</code> 函数来对属性进行厨师阿虎，并在注释 3 处调用 <code>start_property_service</code> 启动属性服务</p><h3 id="2）注释-2-处设置子进程信号处理函数"><a href="#2）注释-2-处设置子进程信号处理函数" class="headerlink" title="2）注释 2 处设置子进程信号处理函数"></a>2）注释 2 处设置子进程信号处理函数</h3><p>注释 2 处调用 <code>sigchld_handler_init</code> 用于设置子进程信号处理函数，主要用于防止 init 进程的子进程成为僵尸进程，为了防止僵尸进程的出现系统会在子进程暂停和终止的时候发出 SIGCHLD 信号，而 <code>sigchld_handler_init</code> 函数就是用来接收这个信号的（其内部只处理进程终止的 SIGCHLD 信号）。</p><p>在 UNIX/Linux 中，父进程使用 fork 创建子进程，在子进程终止之后，如果父进程并不知道子进程已经终止了，这时子进程虽然已经推出了，但是在系统进程表中还为它保留了一定的信息（比如进程号、退出状态、运行时间等），这个子进程就被称作僵尸进程。系统进程表示一项有限资源，如果被僵尸进程耗尽的话，系统就可能无法创建新的进程了。</p><h3 id="3）注释-5-负责重启-init-子进程"><a href="#3）注释-5-负责重启-init-子进程" class="headerlink" title="3）注释 5 负责重启 init 子进程"></a>3）注释 5 负责重启 init 子进程</h3><p>Zygote 也是 init 进程的子进程之一，如果出现子进程终止的情况就会触发 <code>sigchld_handler_init</code> 并触发清理 Zygote 进程的信息，然后 Zygote 就会在注释 5 处被重启。</p><h3 id="4）注释-4-用来解析-init-rc-文件"><a href="#4）注释-4-用来解析-init-rc-文件" class="headerlink" title="4）注释 4 用来解析 init.rc 文件"></a>4）注释 4 用来解析 init.rc 文件</h3><p><code>init.rc</code> 是一个非常重要的配置文件，它是由 Android 初始化语言（Android Init Language）编写的脚本，这种语言主要包含 5 种类型语句：Action、Command、Service、Option 和 Import。</p><h2 id="Zygote-的配置与启动"><a href="#Zygote-的配置与启动" class="headerlink" title="Zygote 的配置与启动"></a>Zygote 的配置与启动</h2><h3 id="1）Zygote-配置"><a href="#1）Zygote-配置" class="headerlink" title="1）Zygote 配置"></a>1）Zygote 配置</h3><p>从 Android 8.0 开始对 <code>init.rc</code> 文件进行了拆分，每个服务对应一个 rc 文件，下面是 Zygote 启动脚本，在 <code>init.zygote64.rc</code> 中。代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server</span><br><span class="line">    class main</span><br><span class="line">    priority -20</span><br><span class="line">    user root</span><br><span class="line">    group root readproc reserved_disk</span><br><span class="line">    socket zygote stream 660 root system</span><br><span class="line">    onrestart write /sys/android_power/request_state wake</span><br><span class="line">    onrestart write /sys/power/state on</span><br><span class="line">    onrestart restart audioserver</span><br><span class="line">    onrestart restart cameraserver</span><br><span class="line">    onrestart restart media</span><br><span class="line">    onrestart restart netd</span><br><span class="line">    onrestart restart wificond</span><br><span class="line">    writepid /dev/cpuset/foreground/tasks</span><br></pre></td></tr></table></figure><p>Service 命令用于通知 init 进程 Zygote 进程的名为 zygote，这个进程执行程序的路径为 <code>system/bin/app_process64</code>，后面的代码是要传给 <code>app_process64</code> 的参数。<code>class main</code> 指的是 Zygote 的 classname 为 main。</p><p>Service 命令会由 init main 函数的代码中解析为 Service 对象，再添加到 ServiceManager 中 vector 类型的 Service 链表中，执行 Service 命令解析的主要涉及文件是是 <code>system/core/init/service.cpp</code> 执行的时候</p><h3 id="2）Zygote-进程的真正启动"><a href="#2）Zygote-进程的真正启动" class="headerlink" title="2）Zygote 进程的真正启动"></a>2）Zygote 进程的真正启动</h3><p>init.rc 是一个配置文件，在 Service 命令定义 Zygote 后还有如下配置代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">on nonencrypted</span><br><span class="line">    class_start main</span><br><span class="line">    class_start late_start</span><br></pre></td></tr></table></figure><p>其中 clas_start 对应的函数执行是 <code>system/core/init/builtins.cpp</code> 中的 <code>do_class_start</code>，这里就是启动 classname 为 main 的 Service，其中 zygote 就是在此处启动的。如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Result&lt;Success&gt; <span class="title">do_class_start</span><span class="params">(<span class="keyword">const</span> BuiltinArguments&amp; args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Starting a class does not start services which are explicitly disabled.</span></span><br><span class="line">    <span class="comment">// They must  be started individually.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; service : ServiceList::GetInstance()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (service-&gt;classnames().count(args[<span class="number">1</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">auto</span> result = service-&gt;StartIfNotDisabled(); !result) &#123;</span><br><span class="line">                LOG(ERROR) &lt;&lt; <span class="string">"Could not start service '"</span> &lt;&lt; service-&gt;name()</span><br><span class="line">                           &lt;&lt; <span class="string">"' as part of class '"</span> &lt;&lt; args[<span class="number">1</span>] &lt;&lt; <span class="string">"': "</span> &lt;&lt; result.error();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 Zygote 执行程序的路径是 <code>/system/bin/app_process64</code> 对应的文件为 <code>framework/base/cmds/app_process/app_main.cpp</code>，部分代码如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        <span class="comment">// 1. 启动 Zygote</span></span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.ZygoteInit"</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.RuntimeInit"</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: no class name or --zygote supplied.\n"</span>);</span><br><span class="line">        app_usage();</span><br><span class="line">        LOG_ALWAYS_FATAL(<span class="string">"app_process: no class name or --zygote supplied."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如上注释 1 处调用 runtime 的 start 函数启动 Zygote，至此 Zygote 就启动了。</li></ul><h2 id="Android-系统的属性服务"><a href="#Android-系统的属性服务" class="headerlink" title="Android 系统的属性服务"></a>Android 系统的属性服务</h2><p>Android 系统提供了属性服务，其实是类似于 Windows 系统中的注册表管理器，用于记录用户的一些使用信息，从而在系统或软件重启后，扔能够获取存储的记录，进行相应的初始化工作。</p><p>init 进程启动时会启动属性服务，并为其分配内存，用来存储这些属性，如果需要属性直接读取就可以了，上面 <code>init.cpp</code> 的提到的 <code>property_init</code>, <code>start_property_service</code> 就是用于初始化属性配置和启动属性服务的。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_property_service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    selinux_callback cb;</span><br><span class="line">    cb.func_audit = SelinuxAuditCallback;</span><br><span class="line">    selinux_set_callback(SELINUX_CB_AUDIT, cb);</span><br><span class="line"></span><br><span class="line">    property_set(<span class="string">"ro.property_service.version"</span>, <span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    property_set_fd = CreateSocket(PROP_SERVICE_NAME, SOCK_STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK,</span><br><span class="line">                                   <span class="literal">false</span>, <span class="number">0666</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">if</span> (property_set_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        PLOG(FATAL) &lt;&lt; <span class="string">"start_property_service socket creation failed"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    listen(property_set_fd, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    register_epoll_handler(property_set_fd, handle_property_set_fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>属性服务通过创建非阻塞的 Socket</li><li>属性服务通过 listen 函数对 property_set_fd 进行设置最多同时可以为 8 个试图设置属性服务的用户提供服务。</li><li>最终将 property_set_fd 放入 epoll 中，用 epoll 监听收到新数据的时候回调 <code>handle_property_set_fd</code> 函数</li></ul><p>ps: epoll 为 Linux 内核为处理大批量文件描述符而做了改进的 poll，是 Linux 下多路复用 I/O 接口 select/poll 的增强版本，epoll 内部使用数据结构是红黑树，而 select 使用数组，当存在大量文件描述符时，epoll 查找效率会比 select 速度快。</p><p>属性服务中分为控制属性和普通属性，控制属性用来执行一些命令，比如开机的动画就使用了这个属性。控制属性和普通属性的存储、更新逻辑不一致，控制属性的 key 名称以 <code>ctl.</code> 开头。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>init 进程启动做了很多工作，总的来说做了三件事</p><ul><li>创建和挂载启动所需的文件目录</li><li>初始化和启动属性服务</li><li>解析 init.rc 并执行启动 Zygote 进程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;init 进程是 Android 系统中用户空间的第一个进程，进程号为 1，是 Android 系统启动流程中一个关键的步骤，作为第一个进程，它被赋予了很多极其重要的工作职责，比如创建 Zygote (孵化器) 和属性服务等。init 进程是由多个源文件共同组成的，这些文件位于源码目录 system/core/init 中。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://biaomingzhong.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://biaomingzhong.github.io/tags/Android/"/>
    
      <category term="Framework" scheme="https://biaomingzhong.github.io/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title>Android Framework 笔记01 - Android 系统架构概览</title>
    <link href="https://biaomingzhong.github.io/2020/android-framework-01-base-overview/"/>
    <id>https://biaomingzhong.github.io/2020/android-framework-01-base-overview/</id>
    <published>2020-02-15T03:39:18.000Z</published>
    <updated>2021-04-12T07:08:59.929Z</updated>
    
    <content type="html"><![CDATA[<p>Android 是构建在 Linux 基础之上的，下图所示为 Android 系统的主要分层架构。</p><a id="more"></a> <img src="/2020/android-framework-01-base-overview/android-stack_2x.jpg"><h2 id="Linux-内核层-Linux-kernel"><a href="#Linux-内核层-Linux-kernel" class="headerlink" title="Linux 内核层 (Linux kernel)"></a>Linux 内核层 (Linux kernel)</h2><p>Android 的核心系统服务基于 Linux 内核，再次基础上添加了部分 Android 专用的驱动。这些驱动通常与硬件无关，而是为了上层软件服务的，他们包括以下内容：</p><ul><li>Binder 进程间通讯（IPC）基础设施</li><li>Ashmem 匿名共享内存</li><li>lowermemorykiller 进场回收模块</li><li>logger 日志相关</li><li>wakelock 电源管理相关</li><li>Alarm 闹钟相关，为 AlarmManager 服务</li></ul><h2 id="硬件抽象层（HAL）"><a href="#硬件抽象层（HAL）" class="headerlink" title="硬件抽象层（HAL）"></a>硬件抽象层（HAL）</h2><p>硬件抽象层，该层为硬件厂商定义了一套标准接口。有了这套标准接口之后，可以在不影响上层的情况下，调整内部实现。当框架 API 要求访问设备硬件时，Android 系统将为该硬件组件加载库模块。</p><p>硬件抽象层是位于操作系统内核与硬件电路之间的接口层，其目的在于将硬件抽象化，为了保护硬件厂商的知识产权，它隐藏了特定平台的硬件接口细节，为操作系统虚拟硬件平台，使其具有硬件无关性，可在多种平台上进行移植。从软硬件测试的角度来看，都可以分别基于硬件抽象层来完成，使得软硬件测试工作的并行进行成功可能。通俗来讲，就是将控制硬件的动作放在硬件抽象层中。</p><h2 id="系统运行库层-Android-Runtime-和-Native-C-C-Libraries"><a href="#系统运行库层-Android-Runtime-和-Native-C-C-Libraries" class="headerlink" title="系统运行库层 (Android Runtime 和 Native C/C++ Libraries)"></a>系统运行库层 (Android Runtime 和 Native C/C++ Libraries)</h2><p>系统运行库层分为两部分，分别是 C/C++ 程序库和 Android 运行时库，下面分别进行介绍。</p><h3 id="1）C-C-程序库"><a href="#1）C-C-程序库" class="headerlink" title="1）C/C++ 程序库"></a>1）C/C++ 程序库</h3><p>C/C++ 程序库能被 Android 系统中的不同组件所使用，并通过应用框架层为开发者提供服务，主要的 C/C++ 程序库如下：</p><ul><li>OpenGL ES: 3D 绘图库</li><li>Libc: 从 BSD 继承来的标准 C 系统函数库，专门为基于嵌入式 Linux 的设备定制</li><li>Media Framework: 多媒体库，支持多种常用的音频、视频格式录制和回放</li><li>SQLite: 轻型的关系型数据库引擎</li><li>SGL: 底层的 2G 图形渲染引擎</li><li>SSL: 安全套接层，是一种为网络通信提供安全及数据完整性的安全协议</li><li>FreeType: 可移植的字体引擎，它提供统一的接口来访问多种字体格式文件</li></ul><h3 id="2）Android-运行时库"><a href="#2）Android-运行时库" class="headerlink" title="2）Android 运行时库"></a>2）Android 运行时库</h3><p>运行时库又分为核心库 (Core Libraries) 和 ART (Android 系统 5.0 之后，Dalvik 虚拟机被 ART 取代)。</p><p>核心库提供了 Java 语言核心库的大多数功能，这样开发者可以使用 Java 语言来编写 Android 应用。</p><p>与 JVM 相比，Dalvik 虚拟机 (DVM) 是专门为移动设备定制的，允许在有限内存中同时运行多个虚拟机的实例，并且每一个 Dalvik 应用被作为一个独立的 Linux 进程执行。而且独立的进程可以防止在虚拟机崩溃的时候所有程序被关闭。</p><p>替代 DVM 的 ART 的机制与 DVM 又有不同，DVM 中的应用每次运行时，字节码都需要通过即时编译器 (Just In Time, JIT) 转换为机器码，这会使得应用运行效率降低。而在 ART 中，系统在安装应用时会进行一次预编译 (Ahead Of Time, AOT) 将字节码预先编译成机器码并存储在本地，这样应用每一次运行的时候就不需要执行编译了，这样应用的运行效率也得到了大大的提高。</p><h2 id="应用框架层-Java-API-Framework"><a href="#应用框架层-Java-API-Framework" class="headerlink" title="应用框架层 (Java API Framework)"></a>应用框架层 (Java API Framework)</h2><p>Framework 层这一层包含了一系列重要的系统服务。对于 App 层的管理及 App 使用的 API 基本上都是在这一层提供的。这里面包含的服务很多，例如：</p><ul><li>AMS (ActivityManagerService): 包含所有应用组件的管理以及 App 进程管理</li><li>WMS (WindowManagerService): 负责窗口管理</li><li>PMS (PackageManagerService): 负责 APK 包的管理（安装、卸载、更新等）</li><li>NMS (NotificationManagerService): 负责通知管理</li><li>PMS (PowerManagerService): 电源管理</li><li>LMS (LocationManagerService): 定位相关</li><li>……</li></ul><h2 id="应用层-System-Apps"><a href="#应用层-System-Apps" class="headerlink" title="应用层 (System Apps)"></a>应用层 (System Apps)</h2><p>系统内置的应用程序与非系统级的应用程序都属于应用层，负责与用户进行直接交互，通常都是用 Java 进行开发的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 是构建在 Linux 基础之上的，下图所示为 Android 系统的主要分层架构。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://biaomingzhong.github.io/categories/Android/"/>
    
    
      <category term="Android" scheme="https://biaomingzhong.github.io/tags/Android/"/>
    
      <category term="Framework" scheme="https://biaomingzhong.github.io/tags/Framework/"/>
    
  </entry>
  
  <entry>
    <title>Android 内存重启优化</title>
    <link href="https://biaomingzhong.github.io/2018/android-restore-state-optimize/"/>
    <id>https://biaomingzhong.github.io/2018/android-restore-state-optimize/</id>
    <published>2018-02-09T22:08:30.000Z</published>
    <updated>2021-04-12T07:08:59.930Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章是由Android App 的一种<code>内存重启</code>现象引发的思考，是基于Activity 基类的规范状态使用和数据处理。</p><p>这种设计的关键内存重启后怎么进行<code>恢复关键数据</code>和<code>预加载数据</code>，并且<code>规范 Acitivity 基类</code>，让团队减少处理内存重启的情况，并且减少因为 <code>关键数据缺失</code> 导致的崩溃问题。</p><a id="more"></a><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><ol><li><code>内存重启</code>：表现是 App 从后台进入前台的过程中，因为内存数据之前已经被回收，系统会从最后一个显示的 Activity 开始一步步恢复 Activity 和 Activity 状态。</li><li>Activity 状态 - <code>初始状态</code> ：初始状态为 Activity 加载了一个 <code>layout</code> 布局，还没有获取任何的 id 、操作 view 、开始异步加载数据。</li><li>Activity 状态 - <code>数据渲染状态</code>：初始状态以后开始加载数据和渲染改变一些界面的状态，会以一个方法作为入口，正常启动会直接 <code>onCreate</code> 初始状态后进入 <code>数据渲染状态</code>，但我的做法是<code>内存重启</code> 的时候会在 Activity 的 <code>onActivityResult</code> 才进入数据渲染状态。那么具体怎么做到呢？</li></ol><h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><p>假定：恢复的 Activity 为 <code>RestoreActivity</code>，引导页 Activity 为 <code>AppStartActivity</code></p><ul><li>在所有 Activity 的基类中有判断，若 <code>onCreate</code> 发现是<strong>内存重启</strong>的情况下，调用 <code>RestoreActivity</code><br>的 <code>startActivityForResult</code> 启动一个引导界面<code>AppStartActivity</code>，同时结束 <code>onCreate</code> 不进入 <code>数据渲染状态</code>，直到启动页面结束返回，这个恢复的 Activity 被系统调用了 <code>onActivityResult</code> 通知我们结果，然后根据接收到返回的对应 result code 进入 <code>数据渲染状态</code> 。</li><li>第二点很重要的是，在这个引导界面进行一些 App 的<code>全局数据单例的恢复</code>（例如：已登录的用户单例信息），当然根据需求可以适当<code>预访问或预加载</code>一些比较急需的 App 全局数据，加速返回后的恢复页 Activity 的界面展现，因为引导页的时间一般都会有最低3秒或有个最低秒数阈值，所以理论上可以<code>合理预加载</code>一点数据利用一下，但是一定要注意是在 <code>恢复关键数据</code> 之后，并且到达一定时间就要返回，太长时间的引导界面会让人烦恼，这样设计的关键就是<code>恢复关键数据</code>和<code>预加载数据</code></li></ul><p>为什么会这么设计呢？有心人注意去测试看看 <code>微信</code> 的启动，真正的内存重启的时候，会让你看到 <code>小人 + 地球</code> 的引导 Activity，再返回真正的对应恢复 Activity，<code>用户体验</code>上也是内存重启就会出现一个相对较友好的引导界面做了一个长期的用户认知培养，而不是一个 <code>正在加载或容易 crash</code> 的界面。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>可以不用依赖于一个 Activity 级别去实现这个 引导界面，通过 Fragment 和 属性变量来实现也可以，若发现是 <code>内存重启</code> 不进入 <code>数据渲染状态</code>，加载引导 Fragment，做对应的<code>恢复关键数据</code>和<code>预加载数据</code>，改变属性变量调用对应的入口方法，继续进入 <code>数据渲染状态</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是由Android App 的一种&lt;code&gt;内存重启&lt;/code&gt;现象引发的思考，是基于Activity 基类的规范状态使用和数据处理。&lt;/p&gt;&lt;p&gt;这种设计的关键内存重启后怎么进行&lt;code&gt;恢复关键数据&lt;/code&gt;和&lt;code&gt;预加载数据&lt;/code&gt;，并且&lt;code&gt;规范 Acitivity 基类&lt;/code&gt;，让团队减少处理内存重启的情况，并且减少因为 &lt;code&gt;关键数据缺失&lt;/code&gt; 导致的崩溃问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://biaomingzhong.github.io/categories/Android/"/>
    
    
      <category term="内存重启" scheme="https://biaomingzhong.github.io/tags/%E5%86%85%E5%AD%98%E9%87%8D%E5%90%AF/"/>
    
      <category term="预加载" scheme="https://biaomingzhong.github.io/tags/%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="优化" scheme="https://biaomingzhong.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>[译] ConstraintLayout深入系列之中心点对齐</title>
    <link href="https://biaomingzhong.github.io/2017/constraintlayout-tricks-centring/"/>
    <id>https://biaomingzhong.github.io/2017/constraintlayout-tricks-centring/</id>
    <published>2017-05-26T08:44:34.000Z</published>
    <updated>2021-04-12T07:09:00.022Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://constraintlayout.github.io/tricks/centring.html" target="_blank" rel="noopener">ConstraintLayout tricks &amp; tips Centring</a><br>作者：<a href="https://github.com/StylingAndroid" target="_blank" rel="noopener">Mark Allison</a></p><hr><h2 id="中心点对齐"><a href="#中心点对齐" class="headerlink" title="中心点对齐"></a>中心点对齐</h2><p>在 Android 设计布局中，我们常常遇到需要根据父组件、相邻组件甚至是相邻组件的边来进行中心点对齐。本文将讲解如何使用 <code>ConstraintLayout</code> 来满足这些中心点对齐的需求。</p><p>需要中心点对齐的 Views 一般是有自己不定的内容大小的，经常定义的宽高是 <code>android:layout_[width|height]=&quot;wrap_content&quot;</code> 。本文中使用到的例子也会按照这个模式来使用。</p><a id="more"></a><h3 id="相对父组件进行居中对齐"><a href="#相对父组件进行居中对齐" class="headerlink" title="相对父组件进行居中对齐"></a>相对父组件进行居中对齐</h3><p>在父组件中居中对齐，可以通过对 View 的某个坐标轴的两个边的锚点设置约束条件到父组件相对应的边来进行居中。比如，让子组件垂直居中的话，我们需要设置 <code>top</code> 和 <code>bottom</code> 上下边的锚点约束，而水平居中的话，则需要设置 <code>start</code> 和 <code>end</code> 左右边的锚点约束。此处使用 <code>start</code> 和 <code>end</code> 而不是用 <code>left</code> 和 <code>right</code> 是为了更好的 RTL (Right to Left)布局体验。</p><img src="/2017/constraintlayout-tricks-centring/centring_parent.gif"><p>在这个例子中，我们设置 View 的 <code>start</code> 边到父组件的 <code>start</code> 边，同时设置了 <code>end</code> 边到父组件的 <code>end</code> 边。</p><h3 id="在-XML-设置相对父组件居中"><a href="#在-XML-设置相对父组件居中" class="headerlink" title="在 XML 设置相对父组件居中"></a>在 XML 设置相对父组件居中</h3><p>在 XML 其实跟视图编辑器是一样的意思，设置好 <code>app:layout_constraintStart_toStartOf=&quot;parent&quot;</code> 以及 <code>app:layout_constraintEnd_toEndOf=&quot;parent&quot;</code>，如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相对邻组件的中心点居中"><a href="#相对邻组件的中心点居中" class="headerlink" title="相对邻组件的中心点居中"></a>相对邻组件的中心点居中</h3><p>这种中心点居中跟相对父组件的中心点居中差不多，唯一的区别就是设置的约束是向相邻组件而不是向父组件，如下图操作：</p><img src="/2017/constraintlayout-tricks-centring/centring_sibling_middle.gif"><h3 id="在-XML-中设置对邻组件居中"><a href="#在-XML-中设置对邻组件居中" class="headerlink" title="在 XML 中设置对邻组件居中"></a>在 XML 中设置对邻组件居中</h3><p>在 XML 源码中也是一样，非常相似，唯一不同就是约束指向邻组件的 <code>android:id</code> 而不是 <code>parent</code> ：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"@+id/imageView"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"@+id/imageView"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相对邻组件的某一边中心点居中"><a href="#相对邻组件的某一边中心点居中" class="headerlink" title="相对邻组件的某一边中心点居中"></a>相对邻组件的某一边中心点居中</h3><p>最后要讲解的这个中心点居中，在其他布局中非常不好实现，对于此 Material Design 指南中已经提到了 <a href="https://material.io/guidelines/components/buttons-floating-action-button.html#buttons-floating-action-button-large-screens" target="_blank" rel="noopener">如何让浮动按钮对齐到某个组件的边缘</a> ，通过 ConstraintLayout 可以轻松实现这个效果。假如，我们需要设置垂直向的居中到某一边，那么就设置 View 的 <code>top</code> 和 <code>bottom</code> 边的锚点约束到邻组件的那条边的同一边的中心锚点上，如下图所示：</p><img src="/2017/constraintlayout-tricks-centring/centring_sibling_edge.gif"><h3 id="在-XML-中设置对邻组件某边居中"><a href="#在-XML-中设置对邻组件某边居中" class="headerlink" title="在 XML 中设置对邻组件某边居中"></a>在 XML 中设置对邻组件某边居中</h3><p>在 XML 中也是非常的简单明了，直接就是设置约束到同一个锚点，<code>app:layout_constraintTop_toBottomOf=&quot;@+id/imageView&quot;</code> 和 <code>app:layout_constraintBottom_toBottomOf=&quot;@+id/imageView&quot;</code>，代码如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/imageView"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"@+id/imageView"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://constraintlayout.github.io/tricks/centring.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ConstraintLayout tricks &amp;amp; tips Centring&lt;/a&gt;&lt;br&gt;作者：&lt;a href=&quot;https://github.com/StylingAndroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mark Allison&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;中心点对齐&quot;&gt;&lt;a href=&quot;#中心点对齐&quot; class=&quot;headerlink&quot; title=&quot;中心点对齐&quot;&gt;&lt;/a&gt;中心点对齐&lt;/h2&gt;&lt;p&gt;在 Android 设计布局中，我们常常遇到需要根据父组件、相邻组件甚至是相邻组件的边来进行中心点对齐。本文将讲解如何使用 &lt;code&gt;ConstraintLayout&lt;/code&gt; 来满足这些中心点对齐的需求。&lt;/p&gt;&lt;p&gt;需要中心点对齐的 Views 一般是有自己不定的内容大小的，经常定义的宽高是 &lt;code&gt;android:layout_[width|height]=&amp;quot;wrap_content&amp;quot;&lt;/code&gt; 。本文中使用到的例子也会按照这个模式来使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://biaomingzhong.github.io/categories/Android/"/>
    
    
      <category term="Android-Studio" scheme="https://biaomingzhong.github.io/tags/Android-Studio/"/>
    
      <category term="ConstraintLayout" scheme="https://biaomingzhong.github.io/tags/ConstraintLayout/"/>
    
  </entry>
  
  <entry>
    <title>[译] ConstraintLayout深入系列之代替常见布局</title>
    <link href="https://biaomingzhong.github.io/2017/constraintlayout-layouts-common/"/>
    <id>https://biaomingzhong.github.io/2017/constraintlayout-layouts-common/</id>
    <published>2017-05-26T05:14:50.000Z</published>
    <updated>2021-04-12T07:08:59.957Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://constraintlayout.github.io/layouts/" target="_blank" rel="noopener">ConstraintLayout layouts</a><br>作者：<a href="https://github.com/StylingAndroid" target="_blank" rel="noopener">Mark Allison</a> 、 <a href="https://github.com/rock3r" target="_blank" rel="noopener">Sebastiano Poggi</a></p><hr><p>本文将列举讲述如何使用 <code>ConstraintLayout</code> 来代替常见的三种布局 LinearLayout 、 RelatvieLayout 、 <code>PercentLayout</code> 的用法，本文使用的 Android Studio 都是 <code>2.4 alpha 7</code> 版本的，而 ConstraintLayout 库是使用的 <code>1.0.2</code>。</p><a id="more"></a><h2 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h2><h3 id="浮动对齐特性"><a href="#浮动对齐特性" class="headerlink" title="浮动对齐特性"></a>浮动对齐特性</h3><p><code>LinearLayout</code> 的基本用法就是将子组件 View 在水平或者垂直方向浮动对齐，基于属性 <code>orientation</code> 来设置。在视图编辑器中使用 ConstraintLayout 要实现这个特性非常简单，假如要实现相同的垂直方向浮动对齐，步骤很简单，就是添加 View 然后将每一个 View 的上边缘添加约束向到它位置上的另一个 View 即可，如下图：</p><img src="/2017/constraintlayout-layouts-common/linear_layout_flowed.gif"><h3 id="在-XML-中实现浮动对齐特性"><a href="#在-XML-中实现浮动对齐特性" class="headerlink" title="在 XML 中实现浮动对齐特性"></a>在 XML 中实现浮动对齐特性</h3><p>在 XML 中实现该特性也仅仅是为每一个 View 实现一个约束属性 <code>app:layout_constraintTop_toBottomOf</code> 到整个浮动布局中在它之前的 View。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/textView1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/textView2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView4"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/textView3"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子组件权重特性"><a href="#子组件权重特性" class="headerlink" title="子组件权重特性"></a>子组件权重特性</h3><p>要想创建跟 LinearLayout 类似的 weight 权重特性的话，我们需要创建约束 Chain 链，详细可以看看我的<a href="https://biaomingzhong.github.io/2017/constraintlayout-basics-chains-2/">另一篇文章</a>，表现如下图：</p><img src="/2017/constraintlayout-layouts-common/chains_create.gif"><p>Chain 链创建后，我们只需要在属性视图中为每个需要设置 weight 权重的链组件修改 <code>layout_width</code> 为 <code>match_constraint</code> 或者 <code>0dp</code> （两者是一样的），然后再设置对应的权重值到 <code>weight</code> 的配置属性，因为这个例子中我们使用的是水平的 Chain 链，所以设置权重的时候设置的属性是 <code>horizontal_weight</code>，如下图。</p><img src="/2017/constraintlayout-layouts-common/chains_weight_properties.png"><p>最后，我们就可以再 blueprint 蓝图视图下看到如下的展现：</p><img src="/2017/constraintlayout-layouts-common/chains_weight.png"><h3 id="在-XML-中实现权重特性"><a href="#在-XML-中实现权重特性" class="headerlink" title="在 XML 中实现权重特性"></a>在 XML 中实现权重特性</h3><p>首先要如之前的教程一样，<a href="https://biaomingzhong.github.io/2017/constraintlayout-basics-chains-2/">在 XML 创建 Chain 链</a>，然后实现如上的效果只需要对 <code>textView3</code> 修改属性 <code>android:layout_width=&quot;0dp&quot;</code> 并且设置新属性 <code>app:layout_constraintHorizontal_weight=&quot;1&quot;</code>，如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tools:context</span>=<span class="string">"com.stylingandroid.scratch.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintHorizontal_chainStyle</span>=<span class="string">"spread"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/textView3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"141dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintHorizontal_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里 <code>app:layout_constraintHorizontal_weight</code> 属性设置的值与 <code>LinearLayout</code> 中设置的 <code>android:layout_weight</code> 是一样的值并且用法一样，将会根据所有子组件的设置的权重比分割剩余的空间。</p><h2 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h2><p><code>RelativeLayout</code> 主要被用于包装布局根据 views 组件之间的关系或与父组件的关系来布局的子 views 。其实如果你对 <code>RelativeLayout</code> 和 <code>ConstraintLayout</code> 都熟悉的话，就会感觉 <code>RelativeLayout</code> 其实只是 <code>ConstraintLayout</code> 的更基础版本，<code>ConstraintLayout</code> 的很多概念来源其实就是 <code>RelativeLayout</code> 。事实上，你还可以认为 <code>ConstraintLayout</code> 就是加强版的 <code>RelativeLayout</code> ，因为你对旧的 Android 布局组件的熟悉，这将是很好的学习了解 <code>ConstraintLayout</code> 的思想体系模型。</p><h3 id="在视图编辑器中实现-RelativeLayout"><a href="#在视图编辑器中实现-RelativeLayout" class="headerlink" title="在视图编辑器中实现 RelativeLayout"></a>在视图编辑器中实现 RelativeLayout</h3><p>因为 <code>RelativeLayout</code> 就是基于描述各个子 Views 之间的关系，而对各个子 Views 添加约束来实现相同的关系以及展现其实也很相似简易实现。举例，创建布局“ X 位于 Y 之上”的约束就对应于 <code>RelativeLayout</code> 中的 <code>android:layout_above</code> 属性：</p><img src="/2017/constraintlayout-layouts-common/relativelayout.gif"><h3 id="相似效果的属性对应表"><a href="#相似效果的属性对应表" class="headerlink" title="相似效果的属性对应表"></a>相似效果的属性对应表</h3><p>上面已经提到了 <code>RelativeLayout</code> 和 <code>ConstraintLayout</code> 的基本特性概念非常相似。你可以通过查阅我的<a href="https://biaomingzhong.github.io/2017/constraintlayout-basics-constraints-1/">另一篇文章</a>来熟悉 <code>ConstraintLayout</code> 的基础，然后使用如下面的表格中对应的属性来转换 <code>RelativeLayout</code> 中的属性到 <code>ConstraintLayout</code> 。</p><h4 id="相对父组件"><a href="#相对父组件" class="headerlink" title="相对父组件"></a>相对父组件</h4><table><thead><tr><th><code>RelativeLayout</code> 属性</th><th><code>ConstraintLayout</code> 属性</th></tr></thead><tbody><tr><td><code>android:layout_alignParentLeft=&quot;true&quot;</code></td><td><code>app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</code></td></tr><tr><td><code>android:layout_alignParentLeft=&quot;true&quot;</code></td><td><code>app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</code></td></tr><tr><td><code>android:layout_alignParentStart=&quot;true&quot;</code></td><td><code>app:layout_constraintStart_toStartOf=&quot;parent&quot;</code></td></tr><tr><td><code>android:layout_alignParentTop=&quot;true&quot;</code></td><td><code>app:layout_constraintTop_toTopOf=&quot;parent&quot;</code></td></tr><tr><td><code>android:layout_alignParentRight=&quot;true&quot;</code></td><td><code>app:layout_constraintRight_toRightOf=&quot;parent&quot;</code></td></tr><tr><td><code>android:layout_alignParentEnd=&quot;true&quot;</code></td><td><code>app:layout_constraintEnd_toEndOf=&quot;parent&quot;</code></td></tr><tr><td><code>android:layout_alignParentBottom=&quot;true&quot;</code></td><td><code>app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</code></td></tr><tr><td><code>android:layout_centerHorizontal=&quot;true&quot;</code></td><td><code>app:layout_constraintStart_toStartOf=&quot;parent&quot;</code> 和 <code>app:layout_constraintEnd_toEndOf=&quot;parent&quot;</code></td></tr><tr><td><code>android:layout_centerVertical=&quot;true&quot;</code></td><td><code>app:layout_constraintTop_toTopOf=&quot;parent&quot;</code> 和 <code>app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</code></td></tr><tr><td><code>android:layout_centerInParent=&quot;true&quot;</code></td><td><code>app:layout_constraintStart_toStartOf=&quot;parent&quot;</code>, <code>app:layout_constraintTop_toTopOf=&quot;parent&quot;</code>, <code>app:layout_constraintEnd_toEndOf=&quot;parent&quot;</code>, 和 <code>app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</code></td></tr></tbody></table><p>这里要注意，相对父组件的居中没有一对一即是只用一条属性能设置同样效果的，而是通过设置相同的约束条件到相对的两个边缘来实现。水平居中，意味着需要设置两个相同的约束条件到水平的左和友边缘对齐父组件，而垂直居中，则是需要设置两个相同的约束条件到垂直的上下边缘对齐父组件，自然而然的在两个方向上都居中的话，则是需要设置两对相同的约束条件在水平和垂直方向，即是四个约束条件对齐。提醒一下大家，在这里可以通过设置约束条件的 <code>bias</code> 来设置 View 组件垂直或水平对齐到父组件的百分比位置，如下图所示：</p><img src="/2017/constraintlayout-layouts-common/center_with_bias.gif"><h4 id="对齐到其他-View-组件边缘或者基线"><a href="#对齐到其他-View-组件边缘或者基线" class="headerlink" title="对齐到其他 View 组件边缘或者基线"></a>对齐到其他 View 组件边缘或者基线</h4><table><thead><tr><th><code>RelativeLayout</code> 属性</th><th><code>ConstraintLayout</code> 属性</th></tr></thead><tbody><tr><td><code>android:layout_toLeftOf</code></td><td><code>app:layout_constraintRight_toLeftOf</code></td></tr><tr><td><code>android:layout_toStartOf</code></td><td><code>app:layout_constraintEnd_toStartOf</code></td></tr><tr><td><code>android:layout_above</code></td><td><code>app:layout_constraintBottom_toTopOf</code></td></tr><tr><td><code>android:layout_toRightOf</code></td><td><code>app:layout_constraintLeft_toRightOf</code></td></tr><tr><td><code>android:layout_toEndOf</code></td><td><code>app:layout_constraintStart_toEndOf</code></td></tr><tr><td><code>android:layout_below</code></td><td><code>app:layout_constraintTop_toBottomOf</code></td></tr><tr><td><code>android:layout_alignLeft</code></td><td><code>app:layout_constraintLeft_toLeftOf</code></td></tr><tr><td><code>android:layout_alignStart</code></td><td><code>app:layout_constraintStart_toStartOf</code></td></tr><tr><td><code>android:layout_alignTop</code></td><td><code>app:layout_constraintTop_toTopOf</code></td></tr><tr><td><code>android:layout_alignRight</code></td><td><code>app:layout_constraintRight_toRightOf</code></td></tr><tr><td><code>android:layout_alignEnd</code></td><td><code>app:layout_constraintEnd_toEndOf</code></td></tr><tr><td><code>android:layout_alignBottom</code></td><td><code>app:layout_constraintBottom_toBottomOf</code></td></tr><tr><td><code>android:layout_alignBaseline</code></td><td><code>app:layout_constraintBaseline_toBaselineOf</code></td></tr></tbody></table><p>这里提醒一下大家，很多 <code>ConstraintLayout</code> 能够实现的约束条件在 <code>RelativeLayout</code> 中不能实现，比如对齐 View 的基线到另一个 View 的上或者下边缘。之所以没有列出来也是因为 <code>RelativeLayout</code> 中并没有相对应的属性实现。</p><h4 id="Constraint-约束对于不显示的-GONE-Views"><a href="#Constraint-约束对于不显示的-GONE-Views" class="headerlink" title="Constraint 约束对于不显示的 GONE Views"></a>Constraint 约束对于不显示的 <code>GONE</code> Views</h4><p><code>RelativeLayout</code> 实现的属性中，<code>ConstraintLayout</code> 没有实现的属性只有一个 <code>android:layout_alignWithParentIfMissing</code> ，这个属性将会让 View 组件能够在对齐对象不显示 <code>GONE</code> 的时候，对齐到父组件。举个例子，如果 A View 需要设置左对齐到<code>toRightOf</code>另一个 View (这个就命名为 B ) ，当B不显示的时候，就会左边对齐到父组件。</p><p><code>ConstraintLayout</code> 在这点上跟 <code>RelativeLayout</code> 或者说大多数布局都不同，它会考虑显示为 <code>GONE</code> 的组件的位置并且针对不显示任何东西的 View 的约束 Constraint 仍然有效。唯一的缺陷是这个 <code>GONE</code> 的 View 的宽高是 0，而且外边距 margin 也被忽略不考虑。</p><p>为了适应这种场景的情况下，<code>ConstraintLayout</code> 拥有一个属性 <code>app:layout_goneMargin[Left|Start|Top|Right|End|Bottom]</code> 可以用于当约束对象是一个 <code>GONE</code> View 的时候，设置外边距 margin 。在下面的例子中，当按钮消失 gone 的时候，原本存在于输入框对按钮的属性 <code>start_toEndOf</code> 的 <code>24dp</code> 的外边距启用了另一个属性 <code>app:layout_marginGoneStart=&quot;56dp&quot;</code> ，如下动态图所示：</p><img src="/2017/constraintlayout-layouts-common/margin_gone.gif"><h2 id="PercentLayout"><a href="#PercentLayout" class="headerlink" title="PercentLayout"></a>PercentLayout</h2><p><code>PercentLayout</code> 通常被用于响应式布局设计，当需要根据父组件来缩放子组件到百分比的情况。</p><h3 id="相对父组件的百分比宽高"><a href="#相对父组件的百分比宽高" class="headerlink" title="相对父组件的百分比宽高"></a>相对父组件的百分比宽高</h3><p>首先我们要看的特性是，子组件要实现占据父组件的宽度或者高度的固定百分比。它在 <code>PercentLayout</code> 中是通过属性 <code>app:layout_widthPercent</code> 和 <code>app:layout_heightPercent</code> 来实现的（此处的命名空间 app 是因为 PercentLayout 的库引入是来自于 support library）。要实现该特性的话，我们可以通过 <code>ConstraintLayout</code> 中的 Guidelines 参照线来实现。假如我们需要实现 <code>app:layout_widthPercent=&quot;25%&quot;</code> 的特性，我们可以首先创建一个参照线，移动到 <code>25%</code> 处：</p><img src="/2017/constraintlayout-layouts-common/percent_guideline.png"><p>然后我们就需要创建一个 View 将它的创建约束到父组件的 <code>start</code> 边缘以及 <code>end</code> 约束到参照线。在此处，我们没有使用 <code>left</code> 而使用 <code>start</code> 是为了更友好的支持 RTL 语言（从右到左布局，right to left）</p><p>同时，我们还需要注意的是我们需要设置 <code>android:layout_width</code> 是被设置成了 <code>0dp</code> 或者 <code>match_constraint</code>（源码层面，他们是一样的）。然后移除这个 View 的外边距，那么这个 View 的宽度就会自动设置成父组件的 <code>25%</code> ，进一步操作如下图所示：</p><img src="/2017/constraintlayout-layouts-common/percent_width.gif"><h3 id="在-XML-中实现百分比宽高"><a href="#在-XML-中实现百分比宽高" class="headerlink" title="在 XML 中实现百分比宽高"></a>在 XML 中实现百分比宽高</h3><p>以上例子的 XML 源码如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">"0.25"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginEnd</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实际上真正对齐百分比宽高是由 Guidline 完成的，百分比宽的 TextView 只是创建了一个约束到参照线 Guideline就能实现固定的百分比宽高。</p><h3 id="相对父组件的百分比外边距-margin"><a href="#相对父组件的百分比外边距-margin" class="headerlink" title="相对父组件的百分比外边距 margin"></a>相对父组件的百分比外边距 margin</h3><p><code>PercentLayout</code> 还可以让我们实现相对于父组件的百分比外边距 margin 。相比上面百分比宽高的例子，我们一样需要在指定百分比位置设置一个 Guideline参照线，但不是设置 View 的宽度约束到参照线，而是设置 View 的 <code>start</code> 边缘约束到参照线。举个例子，如果我们需要设置的效果是 <code>app:layout_marginStartPercent=&quot;25%&quot;</code> ，我们创建一个在 <code>25%</code> 位置的参照线，然后设置 View 的 <code>start</code> 边缘约束到参照线，如下图所示：</p><img src="/2017/constraintlayout-layouts-common/percent_margin.gif"><p>然后，在这个例子中我们还设置这个 View 的宽度 <code>android:layout_width=&quot;wrap_content&quot;</code> ，然后移除各个方向的外边距 margin ，然后 View 就会有相对于父组件的 25% 宽度外边距 margin。</p><h3 id="在-XML-中实现百分比外边距"><a href="#在-XML-中实现百分比外边距" class="headerlink" title="在 XML 中实现百分比外边距"></a>在 XML 中实现百分比外边距</h3><p>在 XML 中，参照线 Guidline 是跟上面的例子一样的设置，如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">"0.25"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>区别在于，我们的 View 如何设置约束到这个参照线，在这个例子，我们需要设置 <code>app:layout_constraintStart_toStartOf=&quot;@+id/guideline&quot;</code> 然后如上面编辑器中说的一样设置 <code>android:layout_width</code> 为 <code>wrap_content</code> 和 <code>android:layout_marginStart</code> 为 <code>0dp</code> 。</p><h3 id="实现固定横纵比布局"><a href="#实现固定横纵比布局" class="headerlink" title="实现固定横纵比布局"></a>实现固定横纵比布局</h3><p>最后一个特性就是实现 <code>PercentLayout</code> 的横纵比特性，通过它可以让高度固定比例为宽度的函数，或者反过来。关于 <code>ConstraintLayout</code> 如何实现横纵比尺寸，我有<a href="https://biaomingzhong.github.io/2017/constraintlayout-basics-dimensions-4/">另一篇文章</a> 更详细的讲解了这个特性。首先我们设置一个固定的比例，然后设置这个 View 的宽高为 <code>match_constraint</code> 或 <code>0dp</code> ：</p><img src="/2017/constraintlayout-layouts-common/dimension_create.png"><p>然后我们设置好水平方向的两个约束条件，然后至少保留一个垂直方向的约束不设置，那么我们的组件 View 高度就会是依赖于宽度的函数，然后通过移动参照线来缩放 View 的宽度的时候就会发现高度也会相应的根据函数变化。</p><img src="/2017/constraintlayout-layouts-common/dimension_adjust.gif"><h3 id="在-XML-中设置横纵比布局"><a href="#在-XML-中设置横纵比布局" class="headerlink" title="在 XML 中设置横纵比布局"></a>在 XML 中设置横纵比布局</h3><p>在 XML 中，真正设置了宽高比的属性是 <code>app:layout_constraintDimensionRatio</code> 为想要的值，其他规则跟在视图编辑器中是一样的。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tools:context</span>=<span class="string">"com.stylingandroid.scratch.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/imageView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintDimensionRatio</span>=<span class="string">"h,15:9"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">"0.39"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后提醒一下，没懂的小伙伴可以看看另一篇文章 <a href="https://biaomingzhong.github.io/2017/constraintlayout-basics-dimensions-4/">ConstraintLayout基础系列之尺寸横纵比 dimensions</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://constraintlayout.github.io/layouts/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ConstraintLayout layouts&lt;/a&gt;&lt;br&gt;作者：&lt;a href=&quot;https://github.com/StylingAndroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mark Allison&lt;/a&gt; 、 &lt;a href=&quot;https://github.com/rock3r&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sebastiano Poggi&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;本文将列举讲述如何使用 &lt;code&gt;ConstraintLayout&lt;/code&gt; 来代替常见的三种布局 LinearLayout 、 RelatvieLayout 、 &lt;code&gt;PercentLayout&lt;/code&gt; 的用法，本文使用的 Android Studio 都是 &lt;code&gt;2.4 alpha 7&lt;/code&gt; 版本的，而 ConstraintLayout 库是使用的 &lt;code&gt;1.0.2&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://biaomingzhong.github.io/categories/Android/"/>
    
    
      <category term="Android-Studio" scheme="https://biaomingzhong.github.io/tags/Android-Studio/"/>
    
      <category term="ConstraintLayout" scheme="https://biaomingzhong.github.io/tags/ConstraintLayout/"/>
    
      <category term="LinearLayout" scheme="https://biaomingzhong.github.io/tags/LinearLayout/"/>
    
      <category term="RelativeLayout" scheme="https://biaomingzhong.github.io/tags/RelativeLayout/"/>
    
      <category term="PercentLayout" scheme="https://biaomingzhong.github.io/tags/PercentLayout/"/>
    
  </entry>
  
  <entry>
    <title>[译] ConstraintLayout基础系列之尺寸横纵比 dimensions</title>
    <link href="https://biaomingzhong.github.io/2017/constraintlayout-basics-dimensions-4/"/>
    <id>https://biaomingzhong.github.io/2017/constraintlayout-basics-dimensions-4/</id>
    <published>2017-05-25T06:06:57.000Z</published>
    <updated>2021-04-12T07:08:59.948Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://constraintlayout.github.io/basics/guidelines.html" target="_blank" rel="noopener">ConstraintLayout basics guidelines</a><br>作者：<a href="https://github.com/StylingAndroid" target="_blank" rel="noopener">Mark Allison</a></p><hr><h2 id="ConstraintLayout的尺寸-dimensions"><a href="#ConstraintLayout的尺寸-dimensions" class="headerlink" title="ConstraintLayout的尺寸 dimensions"></a>ConstraintLayout的尺寸 dimensions</h2><p>有时候，我们需要创建一些固定方向比的 View 组件，最常使用固定横纵比的就是当 <code>ImageView</code> 用于展示一些固定横纵比的图片的时候。举些例子，书面封面（尺寸横纵比多种多样），电影海报（一般是 4:6 ），电影剧照（一般是 1.85:1 或 2.39:1 ），电视剧（一般是 4:3 或 16:9 ）</p><p>对于不熟悉什么是横纵比的，横纵比就是表示了 View 的宽度与高度的比例 <code>w:h</code> 。例如，对于一个拥有横纵比为 <code>4:6</code> 拥有宽度为 <code>40dp</code> 的 View 组件有着高度是 <code>60dp</code> ，若它的宽度改为 <code>30dp</code> 则它的高度就是 <code>45dp</code> 。</p><a id="more"></a><p>若我们现实的图片能保证同样的横纵比和像素大小，我们可以简单的在两个方向上使用 <code>wrap_content</code> 即可。然而，现实情况由于数学四舍五入等多种原因都有可能造成实际现实的一些小误差。如果只是现实一个图片可能不会有多大问题，但是如果多个图片展示的时候小问题也会被有很不好的视觉效果，甚至当有 View 对齐于这些图片的 ImageView 的时候，也因此产生了变化，整体就会造成布局不平衡混乱了。</p><p>对于这个问题的解决方案之一是，通过创建继承于 <code>ImageView</code> 的子类，并通过覆写 <code>onMeasure()</code> 来实现固定横纵比的布局。常用的 support library 中的 <code>PercentLayout</code> 也提供了一些机制来结局这类横纵比问题。</p><p>同样的 <code>ConstraintLayout</code> 也提供了机制来专门解决这个问题，选择想要控制横纵比的 View 然后通过属性视图中修改 <code>ratio</code> 值来改变横纵比，如下图红色圈内设置：</p><img src="/2017/constraintlayout-basics-dimensions-4/dimension_create.png"><p>如上图，我们设置的 View 组件有着向父组件的 start 和 top 边缘的约束，它的 end 边缘则约束向一条参考线，而 bottom 边缘则没有被约束，这个 View 的 <code>layout_width</code> 和 <code>layout_height</code> 都被设置成 <code>match_constraint</code>，表示他们会根据所有的约束来设置宽高。在布局阶段这个组件的宽度就被计算好了，但是它的高度好像没有被确定。然后，因为设置了宽高横纵比，高度其实也被确定了，只是宽度的一个函数输出值（在以上例子中横纵比是 16:9 ）</p><p>这样设置的好处就是，当宽度变化的时候，高度自动跟着变化，如下图通过移动这个 View 组件 end 边缘约束向的参照线就可以看到效果。</p><img src="/2017/constraintlayout-basics-dimensions-4/dimension_adjust.gif"><h2 id="在-XML-中的尺寸横纵比-DimensionRatio"><a href="#在-XML-中的尺寸横纵比-DimensionRatio" class="headerlink" title="在 XML 中的尺寸横纵比 DimensionRatio"></a>在 XML 中的尺寸横纵比 DimensionRatio</h2><p>上例中的 XML 源码如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tools:context</span>=<span class="string">"com.stylingandroid.scratch.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/imageView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintDimensionRatio</span>=<span class="string">"h,15:9"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintGuide_percent</span>=<span class="string">"0.39"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现，设置横纵比的属性是 <code>app:layout_constraintDimensionRatio</code> ，而这个值有两个部分组成：方向和比例值。</p><p>通过上面的视图编辑器，我们已经知道了宽度就是输入的固定值，从而设置了方向是 <code>h</code> 标识了 <code>horizontal</code> 。其实这个方向可以不用设置，在运行时的 layout 布局过程就可以计算推断出来，但显示的在 xml 源码中声明避免了所有可能出现模棱两可的情况发生。在大多数情况下，这非常不必要因为本身方向是不言自明的，就像例子中，唯有高度没被约束，很容易推断出来高度是根据宽度来的变量函数。</p><p>这种横纵比的组件往往又很大的说服力，当横纵比的权利被赋予的时候。</p><p>最后还要提到的是，上文提到的宽高属性被设置成 <code>match_constraint</code> 实际上在 XML 源码中表现是被设置成 <code>0dp</code>，这就像 <code>LinearLayout</code> 的 <code>weight</code> 属性一样，会在 XML 中设置为 <code>0dp</code> ，而实际大小会根据父组件在布局 <code>layout</code> 过程中的大小来决定计算出来。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://constraintlayout.github.io/basics/guidelines.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ConstraintLayout basics guidelines&lt;/a&gt;&lt;br&gt;作者：&lt;a href=&quot;https://github.com/StylingAndroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mark Allison&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;ConstraintLayout的尺寸-dimensions&quot;&gt;&lt;a href=&quot;#ConstraintLayout的尺寸-dimensions&quot; class=&quot;headerlink&quot; title=&quot;ConstraintLayout的尺寸 dimensions&quot;&gt;&lt;/a&gt;ConstraintLayout的尺寸 dimensions&lt;/h2&gt;&lt;p&gt;有时候，我们需要创建一些固定方向比的 View 组件，最常使用固定横纵比的就是当 &lt;code&gt;ImageView&lt;/code&gt; 用于展示一些固定横纵比的图片的时候。举些例子，书面封面（尺寸横纵比多种多样），电影海报（一般是 4:6 ），电影剧照（一般是 1.85:1 或 2.39:1 ），电视剧（一般是 4:3 或 16:9 ）&lt;/p&gt;&lt;p&gt;对于不熟悉什么是横纵比的，横纵比就是表示了 View 的宽度与高度的比例 &lt;code&gt;w:h&lt;/code&gt; 。例如，对于一个拥有横纵比为 &lt;code&gt;4:6&lt;/code&gt; 拥有宽度为 &lt;code&gt;40dp&lt;/code&gt; 的 View 组件有着高度是 &lt;code&gt;60dp&lt;/code&gt; ，若它的宽度改为 &lt;code&gt;30dp&lt;/code&gt; 则它的高度就是 &lt;code&gt;45dp&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://biaomingzhong.github.io/categories/Android/"/>
    
    
      <category term="Android-Studio" scheme="https://biaomingzhong.github.io/tags/Android-Studio/"/>
    
      <category term="ConstraintLayout" scheme="https://biaomingzhong.github.io/tags/ConstraintLayout/"/>
    
  </entry>
  
  <entry>
    <title>[译] ConstraintLayout基础系列之参照线guidelines</title>
    <link href="https://biaomingzhong.github.io/2017/constraintlayout-basics-guidelines-3/"/>
    <id>https://biaomingzhong.github.io/2017/constraintlayout-basics-guidelines-3/</id>
    <published>2017-05-24T15:49:13.000Z</published>
    <updated>2021-04-12T07:08:59.951Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://constraintlayout.github.io/basics/guidelines.html" target="_blank" rel="noopener">ConstraintLayout basics guidelines</a><br>作者：<a href="https://github.com/StylingAndroid" target="_blank" rel="noopener">Mark Allison</a></p><hr><h2 id="什么是参照线-guidelines"><a href="#什么是参照线-guidelines" class="headerlink" title="什么是参照线 guidelines"></a>什么是参照线 guidelines</h2><p>如果你熟悉 UI 设计软件你应该已经使用过参照线 guidelines 并对它的作用熟悉了。参照线 guideline 提供了视觉上的参照用于 Views 的对齐，而且不会在运行的时候显示，只要你熟悉它的使用了就会发现它对你的对齐实现非常方便。 Google 的 Material 设计原则推荐了使用 <a href="https://material.io/guidelines/layout/metrics-keylines.html#metrics-keylines-keylines-spacing" target="_blank" rel="noopener">keylines</a> 。该文章将介绍如何通过参照线 guidelines 来快速实现这些。</p><a id="more"></a><h3 id="创建参照线-guidelines"><a href="#创建参照线-guidelines" class="headerlink" title="创建参照线 guidelines"></a>创建参照线 guidelines</h3><p>创建垂直参照线 guidelines 需要在 blueprint 视图上右键打开上下文菜单，然后选择 <code>Add Vertical Guideline</code> 即可创建。如下图所示：</p><img src="/2017/constraintlayout-basics-guidelines-3/guideline_create.gif"><p>当前版本的视图编辑器（Android Studio 2.4 alpha 7）默认隐藏参照线，选择 blueprint 内的 View 即可看到参照线。</p><h3 id="参照线-guidelines-的类型"><a href="#参照线-guidelines-的类型" class="headerlink" title="参照线 guidelines 的类型"></a>参照线 guidelines 的类型</h3><p>当前的参照线 guidelines 有三种类型，默认的第一种参考线是会有一个固定的偏移向父组件的 <code>start</code> 边缘（偏移量的单位是 <code>dp</code>）。本文开头创建的参照线对于父组件的 <code>start</code> 边缘参考线为 <code>16dp</code>。为了适配从右向左的布局设置，所以我们应该采用 <code>start</code> 边缘而不是 <code>left</code> 边缘。</p><p>第二种参考线则是有一个固定的偏移向父组件的 <code>end</code> 边缘。而最后一种参考线是根据父组件 ConstraintLayout 的宽度百分比来放置，而且参照线存在一个标识器，可以通过点击这个标识按钮来切换参考线的类型，如下图所示：</p><img src="/2017/constraintlayout-basics-guidelines-3/guideline_cycle.gif"><p>向 <code>start</code> 和 <code>end</code> 类型的偏移量参照线非常适用于 keylines 的使用场景，而百分比形式的参照线则提供了类似于 <code>PercentLayout</code> 的一些功能。</p><h3 id="调整参照线-guidelines"><a href="#调整参照线-guidelines" class="headerlink" title="调整参照线 guidelines"></a>调整参照线 guidelines</h3><p>只要已经创建了参照线，我们可以通过拖动除类型标志器以外的地方的参照线来移动。</p><img src="/2017/constraintlayout-basics-guidelines-3/guideline_position.gif"><p>你可以在例子中看到，对于一些特殊位置，如左右方向的 <code>8dp</code> 偏移量以及居中的 <code>50%</code> 位置，会对参照线有吸引力。</p><h3 id="正确的使用参照线-guidelines"><a href="#正确的使用参照线-guidelines" class="headerlink" title="正确的使用参照线 guidelines"></a>正确的使用参照线 guidelines</h3><p>到此，我们已经知道参照线 guidelines 的所有类型以及如何创建和移动，现在要讨论一下参照线对于我们的用途，用它来作为其他 views 的约束 constraint 对象，也就是说我们可以创建从 view 的一个锚点到参照线的约束 constraint 对象来根据参照线来对齐这个 view。然后如果我们移动参照线，受约束的 view 也会跟着一起移动：</p><img src="/2017/constraintlayout-basics-guidelines-3/guideline_constraints.gif"><p>这个特性其实很强大，例子中只有一个 view 约束指向了参照线，但如果我们有多个 views 约束指向到参照线，移动会让所有的 views 跟着一起动。</p><h3 id="参照线-Guideline-实现原理"><a href="#参照线-Guideline-实现原理" class="headerlink" title="参照线 Guideline 实现原理"></a>参照线 Guideline 实现原理</h3><p>对于喜欢追根寻底的开发者，我们可以更深一步看看 Guideline 的内部实现。源码中 <code>Guideline</code> 类其实就是一个 <code>View</code>，而且它不会渲染任何东西因为它实现了一个 <code>final</code> 的 <code>onDraw()</code> 而且固定了它的可见性为 <code>View.GONE</code> ，这就决定了运行时不会显示任何东西，而在 <code>View</code> 的 <code>layout</code> 布局过程中它会占据一个位置，而其他组件可以通过它来布局对齐。所以实际上的 <code>Guideline</code> 只是一个极其轻量级没有任何显示但是可以用于约束布局对齐的 <code>View</code> 组件。</p><h2 id="在-XML-中的-Guideline"><a href="#在-XML-中的-Guideline" class="headerlink" title="在 XML 中的 Guideline"></a>在 XML 中的 Guideline</h2><p>我们可以看看一个 View 约束对齐到参照线的例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.constraint.Guideline</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintGuide_begin</span>=<span class="string">"16dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"@+id/guideline"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:text</span>=<span class="string">"TextView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参照线 Guideline 拥有了一个属性 <code>app:orientation=&quot;vertical&quot;</code> 来描述它是一个垂直的参照线（此处也可以设置为 <code>horizontal</code>）。它还有属性 <code>app:layout_constraintGuide_begin=&quot;16dp&quot;</code> 来描述它是一个对齐父组件的 <code>start</code> 边缘的 <code>16dp</code> 偏移量处。再次提醒的是，应该用 <code>start</code> 边缘而不是 <code>left</code> 边缘。当然切换向 <code>end</code> 类型的话，可以使用另一个属性 <code>app:layout_constraintGuide_end=&quot;...&quot;</code> ，切换为百分比类型的参照线则是设置属性 <code>app:layout_constraintGuide_percent=&quot;0.5&quot;</code> 值得取值范围为 <code>0.0</code> 到 <code>1.0</code> ，描述的是百分比偏移量。</p><p>而此处的 <code>TextView</code> 源码则表现了，我们可以从 <code>TextView</code> 像对其他 <code>View</code> 一样对 <code>Guideline</code> 添加约束向量，这样的原因就是刚刚分析的原理，因为 Guildeline 就是一个特殊的 <code>View</code> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://constraintlayout.github.io/basics/guidelines.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ConstraintLayout basics guidelines&lt;/a&gt;&lt;br&gt;作者：&lt;a href=&quot;https://github.com/StylingAndroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mark Allison&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;什么是参照线-guidelines&quot;&gt;&lt;a href=&quot;#什么是参照线-guidelines&quot; class=&quot;headerlink&quot; title=&quot;什么是参照线 guidelines&quot;&gt;&lt;/a&gt;什么是参照线 guidelines&lt;/h2&gt;&lt;p&gt;如果你熟悉 UI 设计软件你应该已经使用过参照线 guidelines 并对它的作用熟悉了。参照线 guideline 提供了视觉上的参照用于 Views 的对齐，而且不会在运行的时候显示，只要你熟悉它的使用了就会发现它对你的对齐实现非常方便。 Google 的 Material 设计原则推荐了使用 &lt;a href=&quot;https://material.io/guidelines/layout/metrics-keylines.html#metrics-keylines-keylines-spacing&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;keylines&lt;/a&gt; 。该文章将介绍如何通过参照线 guidelines 来快速实现这些。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://biaomingzhong.github.io/categories/Android/"/>
    
    
      <category term="Android-Studio" scheme="https://biaomingzhong.github.io/tags/Android-Studio/"/>
    
      <category term="ConstraintLayout" scheme="https://biaomingzhong.github.io/tags/ConstraintLayout/"/>
    
  </entry>
  
  <entry>
    <title>[译] ConstraintLayout基础系列之Chains链</title>
    <link href="https://biaomingzhong.github.io/2017/constraintlayout-basics-chains-2/"/>
    <id>https://biaomingzhong.github.io/2017/constraintlayout-basics-chains-2/</id>
    <published>2017-05-23T16:55:46.000Z</published>
    <updated>2021-04-12T07:08:59.930Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://constraintlayout.github.io/basics/create_chains.html" target="_blank" rel="noopener">ConstraintLayout basics create chains</a><br>作者：<a href="https://github.com/StylingAndroid" target="_blank" rel="noopener">Mark Allison</a></p><hr><h2 id="什么是-Chain-链"><a href="#什么是-Chain-链" class="headerlink" title="什么是 Chain 链"></a>什么是 Chain 链</h2><p><code>Chain</code> 链是一种特殊的约束让多个 chain 链连接的 Views 能够平分剩余空间位置。在 Android 传统布局特性里面最相似的应该是 <code>LinearLayout</code> 中的权重比 weight ，但 <code>Chains</code> 链能做到的远远不止权重比 weight 的功能。</p><a id="more"></a><h2 id="开始创建-Chain-链"><a href="#开始创建-Chain-链" class="headerlink" title="开始创建 Chain 链"></a>开始创建 Chain 链</h2><p>前面概要已经提到了 Chain 链是由多个 Views 组合的，所以要创建一个 Chain 链就需要先选择多个想要链接到一起的 Views ，然后再右键选择 ‘Center Horizontally’ 或者 ‘Center Vertically’ 来创建水平链或者垂直链。如下，创建一个水平链：</p><img src="/2017/constraintlayout-basics-chains-2/chains_create.gif"><p>首先，可以注意到 Chain 链两边末端的两个 View 已经存在了相对于父组件的左边缘和右边缘的约束。 Chain 链的创建定义的是 Chain 链组件之间的间隙关系，并不影响原有的非成员间的约束。如下刚刚创建后的图中，有很多视图上的标识符需要解释一下。</p><img src="/2017/constraintlayout-basics-chains-2/chains_create.png"><p>观察截图，可以看到 Chain 链组件之间的连接类似于链条图案，而边缘两端的 View 与 父组件之间的连接类似于弹窗图案。最外面的连接图案代表了 Chain 链的链接模式（chain mode），链接模式决定了 Chain 链如何分配组件之间的剩余空间，你可以从 Chain 链每个组件下面的 “转换 Chain 模式” 按钮来切换 Chain 链模式。</p><img src="/2017/constraintlayout-basics-chains-2/chains_cycle.png"><p>Chain 链模式一共有三种，分别为：<code>spread</code> ，<code>spread_inside</code> 和 <code>packed</code> 。</p><h3 id="Spread-Chain-链模式"><a href="#Spread-Chain-链模式" class="headerlink" title="Spread Chain 链模式"></a>Spread Chain 链模式</h3><p>Chain 链的默认模式就是 <code>spread</code> 模式，它将平分间隙让多个 Views 布局到剩余空间。</p><img src="/2017/constraintlayout-basics-chains-2/chains_spread.png"><h3 id="Spread-Inside-Chain-链模式"><a href="#Spread-Inside-Chain-链模式" class="headerlink" title="Spread Inside Chain 链模式"></a>Spread Inside Chain 链模式</h3><p>Chain 链的另一个模式就是 <code>spread inside</code> 模式，它将会把两边最边缘的两个 View 到外向父组件边缘的距离去除，然后让剩余的 Views 在剩余的空间内平分间隙布局。</p><img src="/2017/constraintlayout-basics-chains-2/chains_spread_inside.png"><h3 id="Packed-Chain-链模式"><a href="#Packed-Chain-链模式" class="headerlink" title="Packed Chain 链模式"></a>Packed Chain 链模式</h3><p>最后一种模式是 <code>packed</code> ，它将所有 Views 打包到一起不分配多余的间隙（当然不包括通过 margin 设置多个 Views 之间的间隙），然后将整个组件组在可用的剩余位置居中：</p><img src="/2017/constraintlayout-basics-chains-2/chains_packed.png"><p>在 packed chain 链模式，打包在一起的 Views 组可以进一步通过控制修改 <code>bias</code> 值来控制打包组的位置，在例子中 <code>bias</code> 模式是 <code>0.5</code> 将 Views 组居中。</p><img src="/2017/constraintlayout-basics-chains-2/chains_packed_bias.gif"><h3 id="Spread-Chain-链的权重"><a href="#Spread-Chain-链的权重" class="headerlink" title="Spread Chain 链的权重"></a>Spread Chain 链的权重</h3><p><code>spread</code> 和 <code>spread inside</code> Chain 链可以设置每个组件的 weight 权重，这跟 <code>LinearLayout</code> 的 <code>weight</code> 权重设置很像。当前版本（Android Studio 2.4 alpha 7）的视图编辑器不能直接操作设置这个权重，不过我们可以通过属性视图（properties 视图）来手动设置属性。</p><img src="/2017/constraintlayout-basics-chains-2/chains_weight.png"><p>对特定的组件设置 <code>spread</code> 权重，首先得选择这个 View 组件，假设该 View 是在一个水平的 Chain 链中，那么需要在属性视图（properties 视图）中设置 <code>android:layout_width=&quot;0dp&quot;</code> 然后修改 <code>app:layout_constraintHorizontal_weight=&quot;1&quot;</code>，如下所示：</p><img src="/2017/constraintlayout-basics-chains-2/chains_weight_properties.png"><p>这时候观察 <code>View</code> 组件在 blueprint 蓝图视图模式中的改变，它的上边和下边缘都从直线变成了类似手风琴的线条，这符号就表示了 <code>spread</code> 或 <code>spread inside</code> Chain 链模式下的被设置了权重的组件。</p><p>同时要注意的是，在 <code>packed</code> Chain 链模式下设置权重 <code>weight</code> 并没有作用。就是说并不像 <code>spread</code> 和 <code>spread inside</code> 模式中表现的占据尽可能的剩余空间，在 <code>packed</code> 模式下该组件就会被收缩成 0 大小。</p><img src="/2017/constraintlayout-basics-chains-2/chains_packed_weight.png"><h2 id="在-XML-中设置-Chain-链"><a href="#在-XML-中设置-Chain-链" class="headerlink" title="在 XML 中设置 Chain 链"></a>在 XML 中设置 Chain 链</h2><p>虽然假如在 XML 中存在特有的属性设置 Chain 链模式会比较好，但事实上并没有特有的属性，而是现有的约束条件的一种组合。在 XML 中设置 Chain 链模式只需要设置好双向互补的约束。本文中首个例子的 XML 源码如下:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tools:context</span>=<span class="string">"com.stylingandroid.scratch.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintHorizontal_chainStyle</span>=<span class="string">"spread"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@+id/textView3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout_editor_absoluteX</span>=<span class="string">"141dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toEndOf</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>textView</code> 中设置了约束属性 <code>app:layout_constraintEndToStartOf=&quot;@+id/textView2&quot;</code> ，而相对的在 <code>textView2</code> 也设置了约束属性 <code>app:layout_constraintStart_toEndOf=&quot;@+id/textView&quot;</code> ，本质上就是创建两个约束条件，同一对锚点但是方向相反的约束条件，这就是 Chain 链的定义方式。</p><p>另外，<code>textView</code> 中的约束属性 <code>app:layout_constraintHorizontal_chainStyle=&quot;spread&quot;</code> 就是指定了链模式 <code>spread</code> 你可以通过修改成 <code>spread inside</code> 或 <code>packed</code> 来切换链模式，而且这个约束属性必须在链头，即是链组件中的第一个组件。</p><p>而设置链模式的 <code>bias</code> 可以通过设置约束属性 <code>app:layout_constraintHorizontal_bias=&quot;0.75&quot;</code> 从 <code>0.0</code> - <code>1.0</code> 。</p><p>最后，我们就可以通过设置属性 <code>android:layout_width=&quot;0dp&quot;</code> 以及 <code>app:layout_constraintHorizontal_weight=&quot;1&quot;</code> 来设置 Chain 链中组件的权重。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://constraintlayout.github.io/basics/create_chains.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ConstraintLayout basics create chains&lt;/a&gt;&lt;br&gt;作者：&lt;a href=&quot;https://github.com/StylingAndroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mark Allison&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;什么是-Chain-链&quot;&gt;&lt;a href=&quot;#什么是-Chain-链&quot; class=&quot;headerlink&quot; title=&quot;什么是 Chain 链&quot;&gt;&lt;/a&gt;什么是 Chain 链&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Chain&lt;/code&gt; 链是一种特殊的约束让多个 chain 链连接的 Views 能够平分剩余空间位置。在 Android 传统布局特性里面最相似的应该是 &lt;code&gt;LinearLayout&lt;/code&gt; 中的权重比 weight ，但 &lt;code&gt;Chains&lt;/code&gt; 链能做到的远远不止权重比 weight 的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://biaomingzhong.github.io/categories/Android/"/>
    
    
      <category term="Android-Studio" scheme="https://biaomingzhong.github.io/tags/Android-Studio/"/>
    
      <category term="ConstraintLayout" scheme="https://biaomingzhong.github.io/tags/ConstraintLayout/"/>
    
  </entry>
  
  <entry>
    <title>[译] ConstraintLayout基础系列之约束（constraints）</title>
    <link href="https://biaomingzhong.github.io/2017/constraintlayout-basics-constraints-1/"/>
    <id>https://biaomingzhong.github.io/2017/constraintlayout-basics-constraints-1/</id>
    <published>2017-05-22T07:45:39.000Z</published>
    <updated>2021-04-12T07:08:59.944Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://constraintlayout.github.io/basics/create_constraint.html" target="_blank" rel="noopener">Constraintlayout basics create constraints</a><br>作者：<a href="https://github.com/StylingAndroid" target="_blank" rel="noopener">Mark Allison</a></p><hr><h2 id="什么是约束（Constraints）"><a href="#什么是约束（Constraints）" class="headerlink" title="什么是约束（Constraints）"></a>什么是约束（Constraints）</h2><p><code>ConstraintLayout</code> 的核心基础就是创建约束。约束定义了布局内两个组件之间的关系，从而控制组件的布局位置。对于刚接触 <code>ConstraintLayout</code> 但对 <code>RelativeLayout</code> 熟悉的开发者来说，约束布局的工作原理很像 <code>RelativeLayout</code> 中通过创建组件间关系来控制布局。</p><a id="more"></a><h2 id="在-Android-Studio-编辑器中创建约束"><a href="#在-Android-Studio-编辑器中创建约束" class="headerlink" title="在 Android Studio 编辑器中创建约束"></a>在 Android Studio 编辑器中创建约束</h2><p>最容易创建约束布局的方式是通过 Android Studio 中的 <code>design</code> 可视化布局编辑器。本文章的例子都通过蓝图 <code>Blueprint</code> 视图来查看展示，我们先简单看看在 <code>Blueprint</code> 视图中的 <code>TextView</code> 。</p><img src="/2017/constraintlayout-basics-constraints-1/blueprint.png"><p>清晰地可以看到 <code>TextView</code> 组件，以及两个箭头符号表示在这个 <code>TextView</code> 组件上存在约束将它对齐到父组件 <code>ConstraintLayout</code> 的左边缘和上边缘。待会再来看它们是如何创建的，还可以看到存在 16dp 的外边距让父组件 <code>ConstraintLayout</code> 和 <code>TextView</code> 的组件边缘之间保留了一些间隙。选择 <code>TextView</code> 组件就会看到如下的缩放和约束锚点。</p><img src="/2017/constraintlayout-basics-constraints-1/anchor_points.png"><p>边角上的小正方形是缩放的控制点，通过拖拉这些点就可以对 <code>TextView</code> 进行缩放。但是这个大多数情况并不是很适用，因为使用这种方式进行缩放后的组件将保持固定的尺寸，而我们往往更需要 <code>TextView</code> 根据具体情况响应式大小。</p><p>每条边中间的锚点就是约束锚点，我们就是用这个锚点来创建约束的。其中左边和上边的锚点里面有蓝点表示这个锚点已经存在了一个约束，相对的右边和下边的空心锚点则表示没有约束。从这个例子，我们就可以看到 <code>TextView</code> 的布局位置就通过定义约束来对齐了父组件。</p><p>任何继承了 <code>TextView</code> 的子组件都拥有另一个锚点：被称为基线（baseline）。这就允许我们通过该锚点来调整组件内的文字对齐基线。选择 <code>TextView</code> 后出现下方按钮，点击其中的 <code>ab</code> 按钮来显示这个锚点。</p><img src="/2017/constraintlayout-basics-constraints-1/baseline.png"><p>在 <code>TextView</code> 上出现香肠状的控制锚点就是基线约束锚点。我们可以通过给这个锚点添加约束就像下面提到给四个边的约束锚点添加约束一样。</p><p>另一个出现的下方按钮中是取消约束按钮（按钮中存在 ‘x’ ），点击将移除该组件上的所有约束。</p><p>创建锚点，我们只需要简单的从一个组件的锚点，拖动指向到另一个组件 <code>View</code> 的锚点。此处的例子，我们创建另一个 <code>TextView</code> （id 为 <code>textView2</code> ,原来的那个 id 是 <code>textview</code>），而且 <code>textView2</code> 已有一个对齐父组件左边的约束，我们再创建一个约束，从 <code>textView2</code> 的上边到 <code>textview</code> 的下边。而这个约束就会让 <code>textView2</code> 对齐到 <code>textview</code> 正下方，如下所示：</p><img src="/2017/constraintlayout-basics-constraints-1/create_constraint.gif"><p>在此处还要注意，我们创建的约束是从 <code>textView2</code> 的上边到 <code>textView</code> 的下边，当我们选择这两个组件的时候，我们只会看到 <code>textView2</code> 的上边约束锚点存在约束，而 <code>textView</code> 的下边约束锚点是空心的不存在约束。</p><img src="/2017/constraintlayout-basics-constraints-1/unidirectional.png"><p>这样的原因是约束是单向的（除非我们谈论的约束是链接 chains ），所以这里例子创建的约束是属于 <code>textView2</code> 的，影响的也是 <code>textView2</code> 的布局位置是相对于 <code>textView</code> 的。因为该约束是只属于 <code>textView2</code> 的，反过来不会影响 <code>textView</code> 的布局位置</p><p>上面讲到的是同级组件间创建约束，而对于一个组件要创建相对于父组件的约束，则只是简单的将约束拖的方向到合适的父组件边缘即可，如下：</p><img src="/2017/constraintlayout-basics-constraints-1/create_parent_constraint.gif"><h2 id="在-XML-中创建约束"><a href="#在-XML-中创建约束" class="headerlink" title="在 XML 中创建约束"></a>在 XML 中创建约束</h2><p>对于想了解在可视化布局下真正的存储的是如何的开发者，以下就是 上面例子的 XML 源码：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/textView2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginStart</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/textView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:text</span>=<span class="string">"TextView"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码中的约束都是以 <code>app:layout_constraint</code> 开头的属性。我们可以看到 <code>ConstraintLayout</code> 中所有子组件都存在这些属性。让他们对齐父组件的边缘。你还可以看到 <code>textView2</code> 定义了一个约束声明了该组件的上边相对对齐到 <code>textview</code> 的下边。</p><p>值得一提的是，这些属性设置都是使用的 <code>app</code> 命名空间因为 <code>ConstraintLayout</code> 是像 <code>Support libraries</code> 也是作为库引入。它属于你的命名空间 <code>app</code> 而不是属于安卓框架（使用命名空间 <code>android</code> ）。</p><h2 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a>删除约束</h2><p>上面提到我们可以通过选中组件后出现的清空按钮来清除所有的约束。最后，我们还要介绍的是只删除其中一个约束。如果在 XML 源码中可以直接去掉相应的属性。若使用的是可视化编辑器，则通过点击约束锚点来去除约束条件。</p><img src="/2017/constraintlayout-basics-constraints-1/delete_constraint.gif">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://constraintlayout.github.io/basics/create_constraint.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Constraintlayout basics create constraints&lt;/a&gt;&lt;br&gt;作者：&lt;a href=&quot;https://github.com/StylingAndroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mark Allison&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;什么是约束（Constraints）&quot;&gt;&lt;a href=&quot;#什么是约束（Constraints）&quot; class=&quot;headerlink&quot; title=&quot;什么是约束（Constraints）&quot;&gt;&lt;/a&gt;什么是约束（Constraints）&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ConstraintLayout&lt;/code&gt; 的核心基础就是创建约束。约束定义了布局内两个组件之间的关系，从而控制组件的布局位置。对于刚接触 &lt;code&gt;ConstraintLayout&lt;/code&gt; 但对 &lt;code&gt;RelativeLayout&lt;/code&gt; 熟悉的开发者来说，约束布局的工作原理很像 &lt;code&gt;RelativeLayout&lt;/code&gt; 中通过创建组件间关系来控制布局。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://biaomingzhong.github.io/categories/Android/"/>
    
    
      <category term="Android-Studio" scheme="https://biaomingzhong.github.io/tags/Android-Studio/"/>
    
      <category term="ConstraintLayout" scheme="https://biaomingzhong.github.io/tags/ConstraintLayout/"/>
    
  </entry>
  
  <entry>
    <title>Web 图片性能优化系列一：背景与基础</title>
    <link href="https://biaomingzhong.github.io/2017/web-image-performence-in-action-1/"/>
    <id>https://biaomingzhong.github.io/2017/web-image-performence-in-action-1/</id>
    <published>2017-04-25T05:29:50.000Z</published>
    <updated>2021-04-12T07:09:00.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是响应式图片"><a href="#什么是响应式图片" class="headerlink" title="什么是响应式图片"></a>什么是响应式图片</h2><p>组成网站的资源中，图片往往是网络负载的主要组成部分，占据了大部分负载而且随着时间推移，这个现象仍然会保持。虽然现在的网络连接速度持续改进，但是同样出现了越来越多的高 <code>DPI</code> 分辨率设备，为了在这些设备上有更好的表现，就需要有更高清晰度的图片，高清晰的同时就需要更大的文件大小。而因为仍需要支持一些相对非高 <code>DPI</code> 的分辨率设备，就需要有低清晰度的图片，从而就需要有更好的方案来实现针对不同设备提供不同的图片，也就是响应式图片 (Responsive images)。同时还要遵循 Web 资源的准则，保持性能和表现的平衡，合理地提供图片资源而不加载不需要使用的多余的资源。</p><p>其实，响应式图片简化来看，关键就是针对不同的设备选取合适的类型和清晰度。</p><p>给不同的设备提供刚好合适的清晰度分辨率是对性能最优的，过高的清晰度不仅意味着更多的传输时间还意味着需要缩放渲染时间，过低的清晰度就会让高 <code>DPI</code> 设备得不到应该有的最优体验。理论上来说确实是有可能给所有的设备提供刚好合适的清晰度。但设备的分辨率太多了，还存在不同的 <code>DPI</code>，所以实践上目前更合理的方案是选择一系列的主要适配的设备产生对应的图片集合，其他设备就适当的选择相近的方案图片进行缩放。</p><p>如果设置响应式图片取决于你是在哪里进行适配（CSS、HTML、JS）以及用于哪些用途（UI、UX），其中主要出现在 CSS 和 HTML 中，以下主要讲解如果选择合适的图片类型，以及如果根据清晰度等因素响应式选择图片。<br><a id="more"></a></p><h2 id="Web-图片的类型"><a href="#Web-图片的类型" class="headerlink" title="Web 图片的类型"></a>Web 图片的类型</h2><p>目前，主要支持两个大类：点阵图（位图 bitmap images、栅格图 raster images）、矢量图（可缩放矢量图 SVG）</p><ul><li>点阵图根据压缩的类型又分为有损和无损的图片，其中使用广泛的格式主要有 JPEG , PNG, GIF, WebP</li><li>矢量图主要有 SVG (可缩放矢量图 SVG)</li></ul><h3 id="Web-有损点阵图"><a href="#Web-有损点阵图" class="headerlink" title="Web 有损点阵图"></a>Web 有损点阵图</h3><p>有损图片的压缩算法往往直接从源文件压缩的过程中丢弃一部分信息，核心就是想通过图片质量根据等级设置 1 ~ 100 降低来换取更小的大小。</p><p>最常用的有损图片就是 JPEG ，比如：数码相机拍照的时候存储成无损格式，但当下载到电脑的时候，通过有损压缩算法转换成 JPEG 格式的图片。</p><p>JPEG 支持24位真彩色，但是不支持透明，所以经常用于类似照片、不透明的图片等方面。它的缺点也很明显，极致有损的压缩会导致显示效果有明显的不同，特别容易受到二次压缩的时候的影响，即是从一个已经压缩的文件中进行有损压缩的时候效果下降特别明显。但正常来说，注意选择合适的压缩等级，效果下降往往就不会被注意到，同时大小下降百分之几十。</p><p>更出色的有损图片： WebP，但 WebP 并不是所有浏览器都支持的，所以需要实现对不支持浏览器的回退到显示 JPEG 或者 PNG格式</p><h3 id="Web-无损点阵图"><a href="#Web-无损点阵图" class="headerlink" title="Web 无损点阵图"></a>Web 无损点阵图</h3><p>无损图片的压缩算法则正好相反，不会丢弃源文件中的信息。在 Web 中当图片质量非常关键的时候，无损图片正好合适，例如网站的 icon。</p><p>无损图片根据色值存储的位数又分为 8位图（8-bit images - 256-color）、真彩色图（Full-color images - 16.7-million-colors）</p><p>其中，无损的8位图 有代表如：png、gif，其中 gif 支持动画，他们都很适合对图片质量有要求，但是本身不需要全色和多变的透明色。</p><p>PS: 虽然 gif 只支持 8位图，但是动图可以根据一些 hack 来实现更清晰的视觉表现，参考 <a href="https://www.zhihu.com/question/24455714" target="_blank" rel="noopener">知乎网址</a></p><p>其次，无损真彩色图的代表如：全色的 PNG (24-bit png)，无损的 WebP，其中全色的 PNG 支持的色值会比 WebP 更广泛。另外注意的是，当你不需要透明色且对质量要求不是特别高的时候，应优先考虑选择 有损 WebP 或者 JPEG 而不是全色 PNG。</p><p>无损图很合适艺术图片、肖像研究、摄影等。选用8位图还是真彩色图需要经验，基础规则就是只使用简单颜色的图片使用8位图格式，当不只是使用简单颜色或者需要全部透明色支持的图片就选用全彩色图。</p><h3 id="Web-特殊的格式-WebP"><a href="#Web-特殊的格式-WebP" class="headerlink" title="Web 特殊的格式 WebP"></a>Web 特殊的格式 WebP</h3><p>从互联网早起以来，栅格图格式只有 JPEG，GIF，PNG，为了更优化 Web 图片的加载速度和性能，谷歌（google）开发了全新的图片格式 WebP。图片压缩体积大约只有 JPEG 的2/3，并能节省大量的服务器带宽资源和数据空间，在压缩方面比 JPEG 和 PNG 的效果更优。</p><p>虽然截至目前已经有<a href="http://caniuse.com/#search=webp" target="_blank" rel="noopener">很多浏览器</a>支持了 WebP ，比如 Chrome (谷歌浏览器) 、国内的 QQ浏览器、UC 浏览器等 Webkit内核的浏览器都支持这种格式，但是同样有一些如 IE系列、Firefox系列的浏览器占比较高的主流浏览器对 WebP 不支持，所以使用 WebP 的时候一定要实现相应的回退策略（订阅本系列教程，我会继续讲解如何更方便地解决这个问题）。</p><p>WebP 有着比 JPEG 和 PNG 更优的压缩效果，有损 WebP 支持透明度也是 JPEG 做不到的，虽然没有 PNG 色度值多，但是除非是在某些对色值有精度要求的网站图片，大部分场景开发者都会优先选择支持 WebP。</p><p>另外一方面，WebP 是支持动画的，而且压缩和表现效果比 GIF 更优，但因为不好统计以及判断浏览器对动画 WebP 是否支持，所以不好控制回退，除非你对这种占比较小的浏览器（支持 WebP 但是不支持动画 WebP）用户不考虑，建议不要使用 WebP 替代 GIF 。</p><h3 id="Web-矢量图-SVG"><a href="#Web-矢量图-SVG" class="headerlink" title="Web 矢量图 SVG"></a>Web 矢量图 SVG</h3><p>矢量图 SVG 使用向量矩阵来存储几何图形以及比例实现支持任何尺寸的缩放，可以看到以下图片的例子，放大几倍后的 svg 质量依然很完美，这就是 SVG 对比点阵图的最大优点。</p><img src="/2017/web-image-performence-in-action-1/svg.png" title="SVG 缩放对比图"><p>不过现在的设备都是以像素为基础单位的，所以所有显示输出最后都是被转化为像素。这就能明显标识矢量图想要显示在这些设备上就要经受一个叫栅格化的过程，每当图片的尺寸有变化、缩放都要经过这个计算栅格化过程，从而保证了每次显示的图片质量。</p><p>如果你熟悉创建向量矩阵，你应该熟悉注入 AI 之类的设计软件。即使这些软件的支持的本地文件格式是二进制，SVG 的格式是 XML（文本类型），它根节点标识了它的媒体类型 <code>image/svg+xml</code> 。这个特性使它可以在文本编辑器中直接修改，或者内联到 HTML 中，甚至可以直接在 <code>SVG</code> 中使用 <code>CSS</code> 和 <code>media queries (媒体查询)</code>。</p><p>虽然从 1999 年的 W3C 标准中就已经将 <code>SVG</code> 纳入了，但真正被网站使用就是在最近这几年。因为对于不同分辨率设备以及显示屏的显示无暇让它倍受欢迎。</p><p>当然啦，<em>SVG</em> 并不是全能的，优势也主要限制在以下几个方面，例如：呈现 Logo 、图标、线形艺术等。另一方面，那些固定色块由几何图形组成的图片也很适合。</p><h2 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h2><p>通过上面的大致介绍每种图片格式的使用场景，掌握一个场景选择哪些图片格式最适合显得尤为重要，这里整理了一些常用的注意点以及经验来划分图片格式的选择，你可以依照表格根据要提供的内容来选择最合适的图片格式。</p><table><thead><tr><th>图片格式</th><th>支持颜色</th><th>图片类型</th><th>压缩类型</th><th>合适场景</th></tr></thead><tbody><tr><td>PNG</td><td>全色</td><td>栅格图</td><td>无损</td><td>质量缺失不可接受的情况，亦或是展示内容需要完全的透明度或者全色。适用于任何一种图片格式，但不像适用于照片的 <em>JPEG</em> 压缩度那么高</td></tr><tr><td>PNG (8)</td><td>256</td><td>栅格图</td><td>无损</td><td>内容不需要全色或者只需要简单 1 位透明度支持的，比如图标、像素阵列</td></tr><tr><td>GIF</td><td>256</td><td>栅格图</td><td>无损</td><td>没有 <code>PNG (8)</code> 压缩度高，其他一样，但支持动画，也主要用于动画</td></tr><tr><td>JPEG</td><td>全色</td><td>栅格图</td><td>有损</td><td>内容需要全色，或者没有使用透明度，而且可以接受质量的丢失。比如照片</td></tr><tr><td>SVG</td><td>全色</td><td>矢量图</td><td>无压缩</td><td>内容支持全色而且要支持缩放的时候质量不变。特别适合线形艺术、几何图形、其他非照片类型的内容，不需要特别处理就优化了多分辨率显示的效果</td></tr><tr><td>WebP(有损)</td><td>全色</td><td>栅格图</td><td>有损</td><td>其他方面跟 JPEG 一样，但更好的是支持透明度以及压缩性能以及效果</td></tr><tr><td>WebP(无损)</td><td>全色</td><td>栅格图</td><td>无损</td><td>其他方面跟全色 PNG 一样，但有更好的压缩性能</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是响应式图片&quot;&gt;&lt;a href=&quot;#什么是响应式图片&quot; class=&quot;headerlink&quot; title=&quot;什么是响应式图片&quot;&gt;&lt;/a&gt;什么是响应式图片&lt;/h2&gt;&lt;p&gt;组成网站的资源中，图片往往是网络负载的主要组成部分，占据了大部分负载而且随着时间推移，这个现象仍然会保持。虽然现在的网络连接速度持续改进，但是同样出现了越来越多的高 &lt;code&gt;DPI&lt;/code&gt; 分辨率设备，为了在这些设备上有更好的表现，就需要有更高清晰度的图片，高清晰的同时就需要更大的文件大小。而因为仍需要支持一些相对非高 &lt;code&gt;DPI&lt;/code&gt; 的分辨率设备，就需要有低清晰度的图片，从而就需要有更好的方案来实现针对不同设备提供不同的图片，也就是响应式图片 (Responsive images)。同时还要遵循 Web 资源的准则，保持性能和表现的平衡，合理地提供图片资源而不加载不需要使用的多余的资源。&lt;/p&gt;&lt;p&gt;其实，响应式图片简化来看，关键就是针对不同的设备选取合适的类型和清晰度。&lt;/p&gt;&lt;p&gt;给不同的设备提供刚好合适的清晰度分辨率是对性能最优的，过高的清晰度不仅意味着更多的传输时间还意味着需要缩放渲染时间，过低的清晰度就会让高 &lt;code&gt;DPI&lt;/code&gt; 设备得不到应该有的最优体验。理论上来说确实是有可能给所有的设备提供刚好合适的清晰度。但设备的分辨率太多了，还存在不同的 &lt;code&gt;DPI&lt;/code&gt;，所以实践上目前更合理的方案是选择一系列的主要适配的设备产生对应的图片集合，其他设备就适当的选择相近的方案图片进行缩放。&lt;/p&gt;&lt;p&gt;如果设置响应式图片取决于你是在哪里进行适配（CSS、HTML、JS）以及用于哪些用途（UI、UX），其中主要出现在 CSS 和 HTML 中，以下主要讲解如果选择合适的图片类型，以及如果根据清晰度等因素响应式选择图片。&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://biaomingzhong.github.io/categories/Web/"/>
    
    
      <category term="HTML" scheme="https://biaomingzhong.github.io/tags/HTML/"/>
    
      <category term="CSS" scheme="https://biaomingzhong.github.io/tags/CSS/"/>
    
      <category term="Image" scheme="https://biaomingzhong.github.io/tags/Image/"/>
    
  </entry>
  
  <entry>
    <title>[译] 通过 Node.js, Express.js 实现 HTTP/2 Server Push</title>
    <link href="https://biaomingzhong.github.io/2017/http2-server-push-node-express/"/>
    <id>https://biaomingzhong.github.io/2017/http2-server-push-node-express/</id>
    <published>2017-04-11T13:16:13.000Z</published>
    <updated>2021-04-12T07:09:00.031Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://webapplog.com/http2-server-push-node-express/" target="_blank" rel="noopener">Optimize Your App with HTTP/2 Server Push Using Node and Express</a><br>作者：<a href="https://github.com/azat-co" target="_blank" rel="noopener">Azat Mardan</a><br>代码：<a href="https://github.com/azat-co/http2-node-server-push" target="_blank" rel="noopener">http2-node-server-push</a></p><hr><h2 id="什么是-HTTP-2-Server-Push"><a href="#什么是-HTTP-2-Server-Push" class="headerlink" title="什么是 HTTP/2 Server Push"></a>什么是 HTTP/2 Server Push</h2><p><code>HTTP/2</code> 是 Web 开发的新标准，拥有很多不错的优点能够让 Web 访问更快且开发的工作更轻松简单。比如，引入多路复用传输不用合并资源，服务器推送（Server Push）资源让浏览器预加载。</p><p>该文不会讲述 <code>HTTP/2</code> 的所有优势。你可以通过上篇文章了解更多<a href="/2017/http2-node-express/" title="[译] Node.js, Express.js 搭建 HTTP/2 服务器">[译] Node.js, Express.js 搭建 HTTP/2 服务器</a>。该文主要关注于在 <code>Node.js</code> 环境使用 <code>Express.js</code> 和 <code>HTTP/2</code> 库 <a href="https://github.com/indutny/node-spdy" target="_blank" rel="noopener">spdy</a>。<br><a id="more"></a><br>服务器推送（Server Push）工作方式是通过在一个 <code>HTTP/2</code> 请求中捆绑多个资源。在底层，服务器会发送一个 <code>PUSH_PROMISE</code>，客户端（包括浏览器）就可以利用它且不基于 <code>HTML</code> 文件是否需要该资源。如果浏览器检测到需要该资源，就会匹配到收到的服务器推送的 <code>PROMISE</code> 然后让该资源表现的就像正常的浏览器 <code>Get</code> 请求资源。显而易见，如果匹配到有推送，浏览器就不需要重新请求，然后直接使用客户端缓存。这推荐几篇文章关于服务器推送（Server Push）的好处：</p><ul><li><a href="https://http2.github.io/faq/#whats-the-benefit-of-server-push" target="_blank" rel="noopener">What’s the benefit of Server Push?</a></li><li><a href="https://blog.cloudflare.com/announcing-support-for-http-2-server-push-2" target="_blank" rel="noopener">Announcing Support for HTTP/2 Server Push</a></li><li><a href="chttps://www.igvita.com/2013/06/12/innovating-with-http-2.0-server-push" target="_blank" rel="noopener">Innovating with HTTP 2.0 Server Push</a></li></ul><p>这是个关于在 <code>Node.js</code> 实现服务器推送（Server Push）实践教程。为了更清晰精简，我们只实现一个路由地址 <code>/pushy</code> 的 <code>Node.js</code> 和 <code>Express.js</code> 服务器，它会推送一个 JS 文件，正如之前所说，我们会用到一个 <code>HTTP/2</code> 库 <a href="https://github.com/indutny/node-spdy" target="_blank" rel="noopener">spdy</a>。</p><h2 id="HTTP-2-和-Node-js"><a href="#HTTP-2-和-Node-js" class="headerlink" title="HTTP/2 和 Node.js"></a>HTTP/2 和 Node.js</h2><p>先解释一下，为啥在 <code>Node.js</code> 环境选择 <code>HTTP/2</code> 库 <a href="https://github.com/indutny/node-spdy" target="_blank" rel="noopener">spdy</a>。当前来说，为 <code>Node.js</code> 主要有两个库实现了 <code>HTTP/2</code> :</p><ul><li><a href="https://github.com/indutny/node-spdy" target="_blank" rel="noopener">spdy</a></li><li><a href="https://github.com/molnarg/node-http2" target="_blank" rel="noopener">http2</a></li></ul><p>两个库都跟 <code>Node.js</code> 核心模块的 <code>http</code> 和 <code>https</code> 模块 api 很相似。这就意味着如果你不使用 <code>Express</code> ，这两个库就没什么区别。然而， <code>spdy</code> 库支持 <code>HTTP/2</code> 和 <code>Express</code>，而 <a href="https://github.com/molnarg/node-http2/issues/100" target="_blank" rel="noopener"><code>http2</code> 库当前不支持 <code>Express</code></a>。这就是为什么我们选择使用 <code>spdy</code> ， <code>Express</code> 是 <code>Node.js</code> 适合搭配的实践标准的服务框架。之所以叫 <code>spdy</code>是来自于 Google 的 SPDY 协议后来升级成 <code>HTTP/2</code>。</p><h2 id="HTTPS密钥和证书"><a href="#HTTPS密钥和证书" class="headerlink" title="HTTPS密钥和证书"></a>HTTPS密钥和证书</h2><p>要在浏览器（Firefox, Safari, Chrome, 或者 Edge）中访问使用 HTTPS ，你需要生成密钥和证书。去搜索 “ssl 密钥生成” 或者按照以下步骤去生成密钥、证书。在该文提供的源码中没有上传生成的密钥和证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir http2-node-server-push </span><br><span class="line">$ <span class="built_in">cd</span> http2-node-server-push</span><br><span class="line">$ openssl genrsa -des3 -passout pass:x -out server.pass.key 2048</span><br><span class="line">...</span><br><span class="line">$ openssl rsa -passin pass:x -<span class="keyword">in</span> server.pass.key -out server.key</span><br><span class="line">writing RSA key</span><br><span class="line">$ rm server.pass.key</span><br><span class="line">$ openssl req -new -key server.key -out server.csr</span><br><span class="line">...</span><br><span class="line">Country Name (2 letter code) [AU]:US</span><br><span class="line">State or Province Name (full name) [Some-State]:California</span><br><span class="line">...</span><br><span class="line">A challenge password []:</span><br><span class="line">...</span><br><span class="line">$ openssl x509 -req -sha256 -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure><p>按照以上步骤，你就会产生三个 SSL 文件：</p><ul><li>server.crt</li><li>server.csr</li><li>server.key</li></ul><p>你就可以在 Node.js 的 <code>server</code> 脚本中读取 server.key 和 server.crt。</p><h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><p>首先，通过 package.json 初始化项目和下载项目依赖：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i express@4.14.0 morgan@1.7.0 spdy@3.4.0 --save</span><br><span class="line">npm i node-dev@3.1.1 --save-dev</span><br></pre></td></tr></table></figure><p>当前的目录结构如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/http2-node-server-push</span><br><span class="line">/node_modules</span><br><span class="line">- index.js</span><br><span class="line">- package.json</span><br><span class="line">- server.crt</span><br><span class="line">- server.csr</span><br><span class="line">- server.key</span><br></pre></td></tr></table></figure><p>然后，在 <code>package.json</code> 的 <code>scripts</code> 中添加两个脚本行，去简化命令（node-dev、自动重载）：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"start": "./node_modules/.bin/node-dev .",</span><br><span class="line">"start-advanced": "./node_modules/.bin/node-dev index-advanced.js"</span><br></pre></td></tr></table></figure><p>现在就可以开始使用 Node.js 、 Express.js 、 spdy 编写这个简单实现的带服务器推送 HTTP/2 服务器</p><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><p>首先，创建 <code>index.js</code> 脚本，并引入以及实例化依赖，看看查看上面的项目目录结构。其中，我使用了 <strong>ES6/ES2015</strong> 的语法 <code>const</code> 来声明依赖，如果你不熟悉该声明语法，你可以进一步阅读<a href="http://webapplog.com/es6" target="_blank" rel="noopener">Top 10 ES6 Features Every Busy JavaScript Developer Must Know</a>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http2 = <span class="built_in">require</span>(<span class="string">'spdy'</span>)</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br></pre></td></tr></table></figure><p>然后，设置 <code>morgan logger</code> 来监听服务器服务了哪些请求。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(logger(<span class="string">'dev'</span>))</span><br></pre></td></tr></table></figure><p>设置主页，该页面显示了 <code>/pushy</code> 是我们服务器推送的页面。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">`hello, http2! go to /pushy`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>服务器推送只需简单的调用 <code>spdy</code> 实现的 <code>res.push</code> ，我们将文件路径名传输进去作为第一个参数，浏览器会使用这个路径名来匹配 <code>push promise</code> 资源。<code>res.push()</code> 的第一个参数 <code>/main.js</code> 一定得跟 HTML 文件中需要的文件名相匹配。</p><p>而第二个参数是一个可选的对象，设置了该资源的一些资源信息描述。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/pushy'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> stream = res.push(<span class="string">'/main.js'</span>, &#123;</span><br><span class="line">    status: <span class="number">200</span>, <span class="comment">// optional</span></span><br><span class="line">    method: <span class="string">'GET'</span>, <span class="comment">// optional</span></span><br><span class="line">    request: &#123;</span><br><span class="line">      accept: <span class="string">'*/*'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    response: &#123;</span><br><span class="line">      <span class="string">'content-type'</span>: <span class="string">'application/javascript'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  stream.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">  stream.end(<span class="string">'alert("hello from push stream!");'</span>)</span><br><span class="line">  res.end(<span class="string">'&lt;script src="/main.js"&gt;&lt;/script&gt;'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>你可以看到，<code>stream</code> 对象有两个方法 <code>on</code> 和 <code>end</code>。前者监听了 <code>error</code> 和 <code>finish</code> 事件，而后者则监听完成传输 <code>end</code>，然后就会 <code>main.js</code> 就会触发弹窗。</p><p>或者，如果你拥有多个数据块，你可以选择使用 <code>res.write()</code> 然后最后使用 <code>res.end()</code>，其中 <code>res.end()</code> 会自动关闭结束 <code>response</code> 而 <code>res.write()</code> 则让它保持开启。（该文的源码中未实现这种情况）</p><p>最后，读取 HTTPS 密钥和证书并使用 <code>spdy</code> 启动运转服务器。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  key: fs.readFileSync(<span class="string">'./server.key'</span>),</span><br><span class="line">  cert: fs.readFileSync(<span class="string">'./server.crt'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http2</span><br><span class="line">  .createServer(options, app)</span><br><span class="line">  .listen(<span class="number">8080</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server is listening on https://localhost:8080.</span></span><br><span class="line"><span class="string">    You can open the URL in the browser.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>该实现的关键就在于，围绕着 <code>streams(流)</code>。不是树林中的河流，而是指开发者使用的从源头到客户端的建立起的数据通道流。如果你几乎不懂流以及 <code>Node.js</code> 和 <code>Express.js</code> 的 HTTP 的请求和返回信息，你可以看看该文章 <a href="https://github.com/azat-co/you-dont-know-node#streams" target="_blank" rel="noopener">You Don’t Know Node</a></p><h2 id="启动和对比-HTTP-2-Server-Push"><a href="#启动和对比-HTTP-2-Server-Push" class="headerlink" title="启动和对比 HTTP/2 Server Push"></a>启动和对比 HTTP/2 Server Push</h2><p>使用命令 <code>node index.js</code> 或者 <code>npm stat</code> 运行服务端脚本，然后访问 <a href="https://localhost:3000/pushy" target="_blank" rel="noopener">https://localhost:3000/pushy</a>，就可以看到弹窗！而且我们在该路由不存在文件，你可以查看服务器终端的 logs ，只会有一个请求，而不是没使用服务器推送的时候的两个请求（一个 HTML、一个 JS）。</p><p>可以在浏览器中检测收到服务器端推送的行为。Chrome 启动开发者工具，打开 Network 标签，你可以看到 <code>main.js</code> 不存在绿色时间条，就是说明没有等待时间 TTFB (Time to First Byte)<a href="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/resource-loading#view-network-timing-details-for-a-specific-resource" target="_blank" rel="noopener">详细</a></p><img src="/2017/http2-server-push-node-express/http2-node-server-push-simple.png" title="服务器推送的效果"><p>再仔细看，可以看到请求是由 <code>Push</code> 开始发起的（Initiator列查看），没有使用服务器推送的 HTTP/2 服务器或者 HTTP/1，这一列就会显示文件名称，如 <code>index.html</code> 发起的显示就是 <code>index.html</code>。</p><p>实践就结束了，使用了 Express 和 Spdy 简单就实现了推送 JS 资源，而该资源可以用于后面 HTML 中 <code>&lt;script&gt;</code> 标签引入的。当然你也可以在脚本中使用 <code>fs</code> 来读取文件资源。事实上，这就是作者实现的 <code>Express HTTP/2 静态资源中间件</code> 设计原理，可以看看<a href="https://github.com/azat-co/http2-node-server-push" target="_blank" rel="noopener">这篇文章</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>HTTP/2 拥有很多很好的特性，服务器推送是最被看好的特性之一。它的好处就在于当浏览器请求页面的时候，同时发送必需的资源文件（图片，CSS 样式，JS 文件），而不需要等待客户端浏览器请求这些资源，从而做到更快的第一次渲染时间</p><p><code>HTTP/2</code> 库 <a href="https://github.com/indutny/node-spdy" target="_blank" rel="noopener">spdy</a> 让开发者在基于 Express 的应用能更容易的实现服务器推送特性。</p><p>可以下载参考本文的<a href="https://github.com/azat-co/http2-node-server-push" target="_blank" rel="noopener">源码</a>，然后为你自己的服务器编写服务器推送你的资源。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://webapplog.com/http2-server-push-node-express/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Optimize Your App with HTTP/2 Server Push Using Node and Express&lt;/a&gt;&lt;br&gt;作者：&lt;a href=&quot;https://github.com/azat-co&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Azat Mardan&lt;/a&gt;&lt;br&gt;代码：&lt;a href=&quot;https://github.com/azat-co/http2-node-server-push&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http2-node-server-push&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;什么是-HTTP-2-Server-Push&quot;&gt;&lt;a href=&quot;#什么是-HTTP-2-Server-Push&quot; class=&quot;headerlink&quot; title=&quot;什么是 HTTP/2 Server Push&quot;&gt;&lt;/a&gt;什么是 HTTP/2 Server Push&lt;/h2&gt;&lt;p&gt;&lt;code&gt;HTTP/2&lt;/code&gt; 是 Web 开发的新标准，拥有很多不错的优点能够让 Web 访问更快且开发的工作更轻松简单。比如，引入多路复用传输不用合并资源，服务器推送（Server Push）资源让浏览器预加载。&lt;/p&gt;&lt;p&gt;该文不会讲述 &lt;code&gt;HTTP/2&lt;/code&gt; 的所有优势。你可以通过上篇文章了解更多&lt;a href=&quot;/2017/http2-node-express/&quot; title=&quot;[译] Node.js, Express.js 搭建 HTTP/2 服务器&quot;&gt;[译] Node.js, Express.js 搭建 HTTP/2 服务器&lt;/a&gt;。该文主要关注于在 &lt;code&gt;Node.js&lt;/code&gt; 环境使用 &lt;code&gt;Express.js&lt;/code&gt; 和 &lt;code&gt;HTTP/2&lt;/code&gt; 库 &lt;a href=&quot;https://github.com/indutny/node-spdy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;spdy&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://biaomingzhong.github.io/categories/Web/"/>
    
    
      <category term="Node.js" scheme="https://biaomingzhong.github.io/tags/Node-js/"/>
    
      <category term="Express" scheme="https://biaomingzhong.github.io/tags/Express/"/>
    
      <category term="HTTP2" scheme="https://biaomingzhong.github.io/tags/HTTP2/"/>
    
  </entry>
  
  <entry>
    <title>[译] Node.js, Express.js 搭建 HTTP/2 服务器</title>
    <link href="https://biaomingzhong.github.io/2017/http2-node-express/"/>
    <id>https://biaomingzhong.github.io/2017/http2-node-express/</id>
    <published>2017-04-10T12:56:38.000Z</published>
    <updated>2021-04-12T07:09:00.029Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://webapplog.com/http2-node" target="_blank" rel="noopener">Easy HTTP/2 Server with Node.js and Express.js</a><br>作者：<a href="https://github.com/azat-co" target="_blank" rel="noopener">Azat Mardan</a><br>代码：<a href="https://github.com/azat-co/http2-express" target="_blank" rel="noopener">http2-express</a></p><hr><h2 id="什么是-HTTP-2"><a href="#什么是-HTTP-2" class="headerlink" title="什么是 HTTP/2"></a>什么是 HTTP/2</h2><p>现代互联网的 <code>TCP/IP</code> 协议发布于1975年，这项技术在41年前是多么令人惊讶。自它发布开始大部分形式，我们使用 <code>HTTP</code> 和 后续接任者 <code>HTTP/1.1</code> 来实现客户端和服务端的通讯。它能很不错的传输 <code>Web</code>，但今时今日的开发者建立网站的方式已经发生了巨大的改变。存在各式各样的外部资源链接例如图片、<code>CSS</code> 文件、<code>JavaScript</code> 资源。资源的种类数量只会持续增长。<br><a id="more"></a><br><code>HTTP/2</code> 是针对表现一直不错的旧协议 <code>HTTP</code> 自从1991年发布以来这15年的第一次大的升级改动！它为优化现代浏览器而生。性能更加优越而且不用使用复杂的行为例如<code>域名分片</code>（通过多个域名发送资源）或者资源文件合并`（提供一个整合的大资源而不是多个小资源）</p><p><code>HTTP/2</code> 是当前 <code>web</code> 的新标准，其雏形是 Google 的 <code>SPDY</code> 协议。当前已经被大多数主流浏览器支持，且很多网站已经通过该协议实现。例如访问 Yahoo 的 <code>Flickr</code> 在使用的是 <code>HTTP/2</code> 协议（截图时间为2016年7月）.</p><img src="/2017/http2-node-express/flickr.png" title="Yahoo 的 Flickr 已经在使用 `HTTP/2` 协议"><h2 id="HTTP-2-的优势和注意事项"><a href="#HTTP-2-的优势和注意事项" class="headerlink" title="HTTP/2 的优势和注意事项"></a>HTTP/2 的优势和注意事项</h2><p><code>HTTP/2</code> 和 <code>HTTP/1.1</code> 的使用没什么区别，仍然可以在 <code>body</code> 中使用类 <code>xml</code> 的语法，使用 <code>header</code> 协议头字段, 状态码, cookies, methods, URLs, 等等。开发者熟悉使用的东西都还可以继续在 <code>HTTP/2</code> 使用。</p><p><code>HTTP/2</code>的优势如下：</p><ol><li>多路复用传输（Multiplexing）：允许浏览器在单个TCP连接中包含多个请求，从而使浏览器能够并行地请求所有的资源；</li><li>服务器推送（Server push）：服务器可以在浏览器知道需要该资源前，推送给浏览器（如：CSS、JS、Image），从而通过减少请求数量来加速页面加载时间；</li><li>流传输优先级（Stream priority）：允许浏览器去控制资源的加载优先级，例如，浏览器先请求 <code>HTML</code> 渲染再去加载其他的 <code>CSS</code> 和 <code>JS</code> 文件；</li><li>头部压缩（Header compression）： <code>HTTP/1.1</code> 请求的头部总是重复一样的内容，而 <code>HTTP/2</code> 则强制对所有请求的头部进行了去重压缩；</li><li>实际的强制加密（De facto mandatory encryption）：虽然加密不是硬性要求的，但是大多数浏览器只支持 <code>TLS（HTTPS）</code> 上的 <code>HTTP/2</code>。</li></ol><p>虽然目前对于 <code>HTTP/2</code> 还不能完全满足一些苛求，但是直到更好的技术出现以前，当前是一项明显的技术进步。让我们来看看，作为 <code>Web</code> 开发者需要了解的必要知识。大部分适用于 <code>HTTP/1.1</code> 的优化技巧在 <code>HTTP/2</code> 中变成多余的，其中一些甚至反而会影响 <code>HTTP/2</code> 上的网站性能，例如：</p><ol><li>资源文件合并；</li><li>你也应该停止使用精灵图（image sprites）、CSS和JS打包，因为只要其中一小部分有改动就会影响客户端的缓存的作用；在 <code>HTTP/2</code> 协议上更好的方式是使用多个的小文件，而不是一个大文件。</li><li>作者希望前端构建工具，如 <code>Grunt</code> 、 <code>Gulp</code> 、 <code>Webpack</code> 将会因此特性被放弃使用，他们使 <code>Web</code> 开发更高的复杂度，极高的学习曲线，以及管理项目的依赖关系。</li><li>另一个适用于 <code>HTTP/1.1</code> 不适用于 <code>HTTP/2</code> 的是，域名分片（为了绕过TCP并行请求数量限制）。虽然它不一定在所有情况下有害，但对于 <code>HTTP/2</code> 的多路复用传输，这样做也已经没好处了。之所以建议不在 <code>HTTP/2</code> 使用域名分片，还因为每个域名会带来额外的查询负载。如果真的有需要，那么更好的方式是解析多个域名到同一个IP，而且保证你使用的是通配符证书或整合了多域名的证书，从而减少域名查询的时间。</li></ol><p>若想了解更多关于 <code>HTTP/2</code> 的介绍，可以看看<a href="https://http2.github.io/faq/" target="_blank" rel="noopener">官网</a>。</p><h2 id="Node-js-搭建-HTTP-2"><a href="#Node-js-搭建-HTTP-2" class="headerlink" title="Node.js 搭建 HTTP/2"></a>Node.js 搭建 HTTP/2</h2><p>现在，让我们看看怎么通过 <code>Node.js</code> 搭建 <code>HTTP/2</code> 服务器。</p><h3 id="部署证书"><a href="#部署证书" class="headerlink" title="部署证书"></a>部署证书</h3><p>创建一个新文件夹以及自己签发的 <code>SSL</code> 证书。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir http2-express </span><br><span class="line">$ <span class="built_in">cd</span> http2-express</span><br><span class="line">$ openssl genrsa -des3 -passout pass:x -out server.pass.key 2048</span><br><span class="line">...</span><br><span class="line">$ openssl rsa -passin pass:x -<span class="keyword">in</span> server.pass.key -out server.key</span><br><span class="line">writing RSA key</span><br><span class="line">$ rm server.pass.key</span><br><span class="line">$ openssl req -new -key server.key -out server.csr</span><br><span class="line">...</span><br><span class="line">Country Name (2 letter code) [AU]:US</span><br><span class="line">State or Province Name (full name) [Some-State]:California</span><br><span class="line">...</span><br><span class="line">A challenge password []:</span><br><span class="line">...</span><br><span class="line">$ openssl x509 -req -sha256 -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure><p>当你访问服务器的时候，因为浏览器默认不信任自己签发的证书，请确保选择 “高级” 和 “继续访问 localhost (不安全)” 或者将 localhost 设置成不安全访问的例外。</p><img src="/2017/http2-node-express/h2-1.png" title="点击 “高级”"> <img src="/2017/http2-node-express/h2-2.png" title="点击 “继续访问 localhost (不安全)”"><h3 id="初始化、依赖、入口"><a href="#初始化、依赖、入口" class="headerlink" title="初始化、依赖、入口"></a>初始化、依赖、入口</h3><p>通过 <code>npm</code> ,初始化项目 <code>package.json</code> ，安装依赖 <code>spdy</code> 和 <code>express</code> ：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm i express spdy --save</span><br></pre></td></tr></table></figure><p>创建应用的入口文件 <code>index.js</code> ，主要是引用以及实例化</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"><span class="keyword">const</span> spdy = <span class="built_in">require</span>(<span class="string">'spdy'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br></pre></td></tr></table></figure><h3 id="定义-Express-js-的-route"><a href="#定义-Express-js-的-route" class="headerlink" title="定义 Express.js 的 route"></a>定义 Express.js 的 route</h3><p>实现 <code>Express.js</code> 的 <code>route</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res</span><br><span class="line">    .status(<span class="number">200</span>)</span><br><span class="line">    .json(&#123;<span class="attr">message</span>: <span class="string">'ok'</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="设置证书以及启动-Server"><a href="#设置证书以及启动-Server" class="headerlink" title="设置证书以及启动 Server"></a>设置证书以及启动 Server</h3><p>通过 <code>fs.readFileSync()</code> 读取证书</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  key: fs.readFileSync(__dirname + <span class="string">'/server.key'</span>),</span><br><span class="line">  cert: fs.readFileSync(__dirname + <span class="string">'/server.crt'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，设置证书选项到 <code>Express</code> 对象：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">spdy</span><br><span class="line">  .createServer(options, app)</span><br><span class="line">  .listen(port, (error) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(error)</span><br><span class="line">      <span class="keyword">return</span> process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Listening on port: '</span> + port + <span class="string">'.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>最后，<code>node .</code> 启动服务器</p><h3 id="检查结果"><a href="#检查结果" class="headerlink" title="检查结果"></a>检查结果</h3><p>通过浏览器的开发者工具查看协议，就如刚刚我们查看 <code>Yahoo 的 Flickr</code> 协议一样。</p><img src="/2017/http2-node-express/h2-3.png" title="点击 “开发者工具检查协议”"><p>可以看到，使用 Node.js 和 Express.js 配合库 <a href="https://github.com/spdy-http2/node-spdy" target="_blank" rel="noopener">node-spdy</a> 实现 <code>HTTP/2</code> 简单易懂。大多数情况下，对你的业务代码是基本不需要修改的，想必，你的网站也已经使用了 <code>HTTPS/SSL</code> （除非你的服务器只提供静态资源，否则你应该使用安全的 <code>HTTPS/SSL</code> ），即使是不使用 HTTP/2 你也可以替换 HTTP/1.1 而使用 SPDY</p><p>当然，在 Node.js 的大环境中，有很多的库，不只是 <a href="https://github.com/spdy-http2/node-spdy" target="_blank" rel="noopener">node-spdy</a> 提供 <code>HTTP/2</code> 实现，例如：<a href="https://github.com/molnarg/node-http2" target="_blank" rel="noopener">node-http2</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>HTTP/2</code> 提供了更多更优的好处，而且不用使用复杂的优化技巧。开始享受 <code>HTTP/2</code> 给你带来的这些好处。展望光明的未来！</p><p>PS: 本文源代码地址在 <a href="https://github.com/azat-co/http2-express" target="_blank" rel="noopener">http2-express</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;https://webapplog.com/http2-node&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Easy HTTP/2 Server with Node.js and Express.js&lt;/a&gt;&lt;br&gt;作者：&lt;a href=&quot;https://github.com/azat-co&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Azat Mardan&lt;/a&gt;&lt;br&gt;代码：&lt;a href=&quot;https://github.com/azat-co/http2-express&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http2-express&lt;/a&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2 id=&quot;什么是-HTTP-2&quot;&gt;&lt;a href=&quot;#什么是-HTTP-2&quot; class=&quot;headerlink&quot; title=&quot;什么是 HTTP/2&quot;&gt;&lt;/a&gt;什么是 HTTP/2&lt;/h2&gt;&lt;p&gt;现代互联网的 &lt;code&gt;TCP/IP&lt;/code&gt; 协议发布于1975年，这项技术在41年前是多么令人惊讶。自它发布开始大部分形式，我们使用 &lt;code&gt;HTTP&lt;/code&gt; 和 后续接任者 &lt;code&gt;HTTP/1.1&lt;/code&gt; 来实现客户端和服务端的通讯。它能很不错的传输 &lt;code&gt;Web&lt;/code&gt;，但今时今日的开发者建立网站的方式已经发生了巨大的改变。存在各式各样的外部资源链接例如图片、&lt;code&gt;CSS&lt;/code&gt; 文件、&lt;code&gt;JavaScript&lt;/code&gt; 资源。资源的种类数量只会持续增长。&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://biaomingzhong.github.io/categories/Web/"/>
    
    
      <category term="Node.js" scheme="https://biaomingzhong.github.io/tags/Node-js/"/>
    
      <category term="Express" scheme="https://biaomingzhong.github.io/tags/Express/"/>
    
      <category term="HTTP2" scheme="https://biaomingzhong.github.io/tags/HTTP2/"/>
    
  </entry>
  
</feed>
